<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>WPS 背景色随主题变色问题</title>
    <link href="/2018/11/03/WPS-%E8%83%8C%E6%99%AF%E8%89%B2%E9%9A%8F%E4%B8%BB%E9%A2%98%E5%8F%98%E8%89%B2%E9%97%AE%E9%A2%98/"/>
    <url>/2018/11/03/WPS-%E8%83%8C%E6%99%AF%E8%89%B2%E9%9A%8F%E4%B8%BB%E9%A2%98%E5%8F%98%E8%89%B2%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>UBuntu  18.04 LTS 下使用 GNOME 深色主题会导致 WPS 出现一些奇奇怪怪的问题，之前使用了一段时间浅色主题应急，现在闲下来了，还是想办法解决一下，毕竟，深色党万岁。</p></blockquote><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>&nbsp;&nbsp;傻傻的 WPS 在我使用 GNOME 深色的主题后，就会出现如下图一样的问题：<br><img src="https://s1.ax1x.com/2018/11/03/i4o2vT.png"><br>&nbsp;&nbsp;实在是不能忍。同时，wps word 默认字体颜色会变为白色，背景色却仍旧是白色，搞得我好几次以为文档格式有问题，缺字少表的。安装了 LibreOffice 和 CrossOver 装的 Office 2016 就没有这个问题。虽说能用，但是还是不能忍。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>&nbsp;&nbsp;那么接下来是解决方案。首先，修改主题不太现实，万一我下次换个主题岂不是又要修改一遍。那么，问题的突破口就需要在 WPS 这里找了。在网上查到一些资料，desktop 快捷方式启动时可以传入一些参数。那么就编辑一下 WPS 的快捷方式，在里面试着指定主题就好了。</p><p>&nbsp;&nbsp;编辑 wps excel 的快捷方式：</p><pre><code class="hljs shell">sudo vim /usr/share/applications/wps-office-et.desktop</code></pre><p>&nbsp;&nbsp;显示内容如下：</p><pre><code class="hljs routeros">[Desktop Entry]<span class="hljs-attribute">Comment</span>=Use WPS Spreadsheets <span class="hljs-keyword">to</span> analyze manage data.Comment[zh_CN]=使用WPS表格分析、管理数据<span class="hljs-attribute">Exec</span>=/usr/bin/et %f<span class="hljs-attribute">GenericName</span>=WPS SpreadsheetsGenericName[zh_CN]=WPS 表格<span class="hljs-attribute">MimeType</span>=application/wps-office.et;application/wps-office.ett;application/wps-office.xls;application/wps-office.xlt;application/vnd.ms-excel;application/msexcel;application/x-msexcel;application/wps-office.xlsx;application/wps-office.xltx;<span class="hljs-attribute">Name</span>=WPS SpreadsheetsName[zh_CN]=WPS 表格<span class="hljs-attribute">StartupNotify</span>=<span class="hljs-literal">false</span><span class="hljs-attribute">Terminal</span>=<span class="hljs-literal">false</span><span class="hljs-attribute">Type</span>=Application<span class="hljs-attribute">Categories</span>=Office;Spreadsheet;Qt;X-DBUS-ServiceName=X-DBUS-StartupType=<span class="hljs-attribute">X-KDE-SubstituteUID</span>=<span class="hljs-literal">false</span>X-KDE-Username=<span class="hljs-attribute">Icon</span>=wps-office-etmain<span class="hljs-attribute">InitialPreference</span>=3<span class="hljs-attribute">StartupWMClass</span>=et</code></pre><p>&nbsp;&nbsp;将 <code>Exec=/usr/bin/et %f</code> 这一行修改为 <code>Exec=/usr/bin/et -style Vimix %f</code> 其中 Vimix 是我电脑上有的一个亮色主题，可以随意修改为自己有的就行。保存退出后再打开，问题已经解决。另外的两个也是同样的操作，就不再赘述。</p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
      <tag>WPS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio: /dev/kvm device permission denied</title>
    <link href="/2018/10/06/Android-Studio-dev-kvm-device-permission-denied/"/>
    <url>/2018/10/06/Android-Studio-dev-kvm-device-permission-denied/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>&nbsp;&nbsp;Android Studio 报 Android Studio: /dev/kvm device permission denied 错误。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><blockquote><p>方案来自<a href="https://stackoverflow.com/questions/37300811/android-studio-dev-kvm-device-permission-denied">stackoverflow</a></p></blockquote><p>&nbsp;&nbsp;As mentioned in the comments, starting with Ubuntu 18.04 and Linux Mint Tara you need to first</p><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> qemu-kvm.</code></pre><p>To check the ownership of /dev/kvm use</p><pre><code class="hljs awk">ls -al <span class="hljs-regexp">/dev/</span>kvm</code></pre><p>The user was root, the group kvm. To check which users are in the kvm group, use</p><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> kvm <span class="hljs-regexp">/etc/g</span>roup</code></pre><p>This returned</p><pre><code class="hljs groovy"><span class="hljs-attr">kvm:</span><span class="hljs-attr">x:</span><span class="hljs-attr">some_number:</span></code></pre><p>on my system: as there is nothing rightwards of the final :, there are no users in the kvm group.<br>To add the user yourname to the kvm group, you could use</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo adduser yourname kvm</span></code></pre><p>which adds the user to the group, and check once again with grep kvm /etc/group.</p><p>As mentioned by @Knossos, you might want to log out and back in (or restart), for the permissions to take effect.</p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>kvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 资源文件分包</title>
    <link href="/2018/10/04/Android-Studio-%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%88%86%E5%8C%85/"/>
    <url>/2018/10/04/Android-Studio-%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%88%86%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>&nbsp;&nbsp;随着 Android 开发的不断推进，Android 项目内的资源文件会越来越多，在寻找时带来一些麻烦，因此对资源的分包势在必行。</p><h1 id="资源分包"><a href="#资源分包" class="headerlink" title="资源分包"></a>资源分包</h1><p>&nbsp;&nbsp;方法很简单，先创建好文件夹，然后配置 app 文件夹下的 <code>build.gradle</code> 文件，比如我的：</p><pre><code class="hljs reasonml">android &#123;    ...    sourceSets &#123;        main &#123;            res.src<span class="hljs-constructor">Dirs(&#x27;<span class="hljs-params">src</span><span class="hljs-operator">/</span><span class="hljs-params">main</span><span class="hljs-operator">/</span><span class="hljs-params">res</span>&#x27;, &#x27;<span class="hljs-params">src</span><span class="hljs-operator">/</span><span class="hljs-params">main</span><span class="hljs-operator">/</span><span class="hljs-params">res_account</span>&#x27;)</span>        &#125;    &#125;&#125;</code></pre><p>&nbsp;&nbsp;此时 sync project 即可。要新增资源文件夹时也在此处操作。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GNOME SHELL 拓展</title>
    <link href="/2018/10/04/GNOME-SHELL-%E6%8B%93%E5%B1%95/"/>
    <url>/2018/10/04/GNOME-SHELL-%E6%8B%93%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在使用 Ubuntu 18.04 后发现了不少好用的 GNOME SHELL 拓展插件，在此做一个推荐及备份。以下插件排名不分先后。</p></blockquote><h1 id="system-monitor"><a href="#system-monitor" class="headerlink" title="system-monitor"></a><a href="https://extensions.gnome.org/extension/120/system-monitor/">system-monitor</a></h1><blockquote><p>Display system informations in gnome shell status bar, such as memory usage, cpu usage, network rates…</p></blockquote><p>&nsbp;&nbsp;在顶栏显示系统硬件状态，十分直观。在 Ubuntu 软件商店中即可安装，可能会遇到依赖问题，会有提示，按照具体提示安装即可，我当时提示缺少 Clutter，那就安装咯：</p><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt-get install gir<span class="hljs-number">1</span>.<span class="hljs-number">2</span>-clutter-<span class="hljs-number">1</span>.<span class="hljs-number">0</span> gir<span class="hljs-number">1</span>.<span class="hljs-number">2</span>-clutter-gst-<span class="hljs-number">3</span>.<span class="hljs-number">0</span> gir<span class="hljs-number">1</span>.<span class="hljs-number">2</span>-gtkclutter-<span class="hljs-number">1</span>.<span class="hljs-number">0</span></code></pre><h1 id="Clipboard-Indicator"><a href="#Clipboard-Indicator" class="headerlink" title="Clipboard Indicator"></a><a href="https://extensions.gnome.org/extension/779/clipboard-indicator/">Clipboard Indicator</a></h1><blockquote><p>Clipboard Manager extension for Gnome-Shell - Adds a clipboard indicator to the top panel, and caches clipboard history.</p></blockquote><p>&nbsp;&nbsp;剪贴板管理，在顶栏查看选择历史剪贴板。</p><h1 id="Coverflow-Alt-Tab"><a href="#Coverflow-Alt-Tab" class="headerlink" title="Coverflow Alt-Tab"></a><a href="https://extensions.gnome.org/extension/97/coverflow-alt-tab/">Coverflow Alt-Tab</a></h1><blockquote><p>Replacement of Alt-Tab, iterates through windows in a cover-flow manner.</p></blockquote><h1 id="Dash-to-Dock"><a href="#Dash-to-Dock" class="headerlink" title="Dash to Dock"></a><a href="https://extensions.gnome.org/extension/307/dash-to-dock/">Dash to Dock</a></h1><blockquote><p>A dock for the Gnome Shell. This extension moves the dash out of the overview transforming it in a dock for an easier launching of applications and a faster switching between windows and desktops. Side and bottom placement options are available.</p></blockquote><p>&nbsp;&nbsp;取代系统 dock 栏。</p><h1 id="Gnome-Shell-Audio-Output-Switcher"><a href="#Gnome-Shell-Audio-Output-Switcher" class="headerlink" title="Gnome Shell Audio Output Switcher"></a><a href="https://extensions.gnome.org/extension/1028/gnome-shell-audio-output-switcher/">Gnome Shell Audio Output Switcher</a></h1><blockquote><p>Gnome-Shell Extension: Easily switch between your audio outputs from the system menu.</p></blockquote><h1 id="Lock-Keys"><a href="#Lock-Keys" class="headerlink" title="Lock Keys"></a><a href="https://extensions.gnome.org/extension/36/lock-keys/">Lock Keys</a></h1><blockquote><p>Numlock &amp; Capslock status on the panel.</p></blockquote><h1 id="Multi-Monitors-Add-On"><a href="#Multi-Monitors-Add-On" class="headerlink" title="Multi Monitors Add-On"></a><a href="https://extensions.gnome.org/extension/921/multi-monitors-add-on/">Multi Monitors Add-On</a></h1><blockquote><p>Add multiple monitors overview and panel for gnome-shell.</p></blockquote><p>&nbsp;&nbsp;外接屏幕神器。</p><h1 id="OpenWeather"><a href="#OpenWeather" class="headerlink" title="OpenWeather"></a><a href="https://extensions.gnome.org/extension/750/openweather/">OpenWeather</a></h1><blockquote><p>Weather extension to display weather information from <a href="https://openweathermap.org/">https://openweathermap.org/</a> or <a href="https://darksky.net/">https://darksky.net</a> for almost all locations in the world.<br>For openweathermap.org, you can either use the extensions default-key or register at <a href="https://openweathermap.org/appid">https://openweathermap.org/appid</a> and set the appropriate switch in the preferences dialog to “off”.<br>For Dark Sky you have to register at <a href="https://darksky.net/dev/register">https://darksky.net/dev/register</a> and get a personal API-key.<br>Since version 29 this extensions uses coordinates to store the locations and makes the names editable to support multiple weather-providers!<br>If you update from versions prior to 29 to 29 or greater (with darksky.net - support) you have to recreate your locations.</p></blockquote><h1 id="Pixel-Saver"><a href="#Pixel-Saver" class="headerlink" title="Pixel Saver"></a><a href="https://extensions.gnome.org/extension/723/pixel-saver/">Pixel Saver</a></h1><blockquote><p>Pixel Saver is designed to save pixel by fusing activity bar and title bar in a natural way.</p></blockquote><h1 id="Screenshot-Tool"><a href="#Screenshot-Tool" class="headerlink" title="Screenshot Tool"></a><a href="https://extensions.gnome.org/extension/1112/screenshot-tool/">Screenshot Tool</a></h1><blockquote><p>Conveniently create, copy, store and upload screenshots.</p></blockquote><h1 id="TopIcons-Plus"><a href="#TopIcons-Plus" class="headerlink" title="TopIcons Plus"></a><a href="https://extensions.gnome.org/extension/1031/topicons/">TopIcons Plus</a></h1><blockquote><p>This extension moves legacy tray icons (bottom left of Gnome Shell) to the top panel. It is a fork from the original extension from ag with settings for icon opacity, saturation, padding, size and tray position, along with a few minor fixes and integration with the Skype integration extension.</p></blockquote><h1 id="User-Themes"><a href="#User-Themes" class="headerlink" title="User Themes"></a><a href="https://extensions.gnome.org/extension/19/user-themes/">User Themes</a></h1><blockquote><p>Load shell themes from user directory.</p></blockquote><p>&nbsp;&nbsp;万物之源。</p><h1 id="Suspend-Button"><a href="#Suspend-Button" class="headerlink" title="Suspend Button"></a><a href="https://extensions.gnome.org/extension/826/suspend-button/">Suspend Button</a></h1><blockquote><p>Allows to modify the suspend/shutdown button in the status menu.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GNOME</tag>
      
      <tag>SHELL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 转换为 Word、Pdf 解决方案</title>
    <link href="/2018/09/30/Markdown-%E8%BD%AC%E6%8D%A2%E4%B8%BA-Word%E3%80%81Pdf-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2018/09/30/Markdown-%E8%BD%AC%E6%8D%A2%E4%B8%BA-Word%E3%80%81Pdf-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>&nbsp;&nbsp;写完的 markdown 文档，需要快速导出为其他格式。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>&nbsp;&nbsp;Windows 下采用插件方案，安装一个名为 <code>Writage</code> 的 word 插件，即可使用 word 打开 markdown 文件，可以此转换为其他格式的文档。</p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>Word</tag>
      
      <tag>Pdf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 10 环境变量小记</title>
    <link href="/2018/09/30/Windows-10-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%B0%8F%E8%AE%B0/"/>
    <url>/2018/09/30/Windows-10-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>新买了一个固态硬盘，打算重装一下系统，在此记录一下环境变量的配置情况，以便恢复环境作为参考。</p></blockquote><h1 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h1><h2 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h2><ul><li>变量名： <code>JAVA_HOME</code></li><li>变量值： <code>C:\Program Files\Java\jdk1.8.0_172</code></li></ul><p>&nbsp;&nbsp;然后在 path 中添加以下内容：</p><ul><li><code>%JAVA_HOME%\bin</code></li></ul><p>&nbsp;&nbsp;再新建一个系统变量：</p><ul><li>变量名：<code>CLASSPATH</code></li><li>变量值：<code>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code></li></ul><h2 id="ADB"><a href="#ADB" class="headerlink" title="ADB"></a>ADB</h2><p>&nbsp;&nbsp;ADB 需要链接到 Android Sdk 安装的目录下，我是在安装 Android Studio 时默认安装，则变量如下：</p><ul><li>变量名 <code>ADB_HOME</code></li><li>变量值 <code>C:\Users\VanXN\AppData\Local\Android\Sdk\platform-tools;C:\Users\VanXN\AppData\Local\Android\Sdk\tools</code></li></ul><p>&nbsp;&nbsp;再在 path 中添加 一条 <code>%ADB_HOME%</code> 值即可。</p><h2 id="MAVEN"><a href="#MAVEN" class="headerlink" title="MAVEN"></a>MAVEN</h2><p>&nbsp;&nbsp;Maven 没什么好说的，直接添加即可：</p><ul><li>变量名 <code>MAVEN_HOME</code></li><li>变量值 <code>D:\Maven\apache-maven-3.5.4</code></li></ul><p>&nbsp;&nbsp; 在 path 中新增一条 <code>%MAVEN_HOME%\bin</code> 值即可。</p><h1 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h1><h1 id="OneDrive"><a href="#OneDrive" class="headerlink" title="OneDrive"></a>OneDrive</h1><p>&nbsp;&nbsp;OneDrive 的默认路径可以在此处更改。</p>]]></content>
    
    
    <categories>
      
      <category>Settings</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows 10</tag>
      
      <tag>环境变量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 10 配置 Maven 环境</title>
    <link href="/2018/09/26/Windows-10-%E9%85%8D%E7%BD%AE-Maven-%E7%8E%AF%E5%A2%83/"/>
    <url>/2018/09/26/Windows-10-%E9%85%8D%E7%BD%AE-Maven-%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="下载-Maven"><a href="#下载-Maven" class="headerlink" title="下载 Maven"></a>下载 Maven</h1><p>&nbsp;&nbsp;首先从 <a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a> 下载 Maven 压缩包， <code>apache-maven-3.5.4-bin.zip</code> 或者 <code>apache-maven-3.5.4-bin.tar.gz</code> 均可。下载完成后解压即可，我解压后文件夹路径为 <code>D:\Maven\apache-maven-3.5.4</code>。Maven 文件夹是我自行创建的，可随意更换。</p><h1 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h1><p>&nbsp;&nbsp;在 <code>D:\Maven\</code> 下另外创建一个文件夹 <code>LocalRepository</code> 用作本地仓库，名字可自取。<br>进入 <code>D:\Maven\apache-maven-3.5.4\conf</code> 文件夹下，编辑 <code>settings.xml</code> 文件，找到下面的内容：</p><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!-- localRepository</span></span><span class="xml">   | The path to the local repository maven will use to store artifacts.</span><span class="xml">   |</span><span class="xml">   | Default: $</span><span class="hljs-template-variable">&#123;user.home&#125;</span><span class="xml">/.m2/repository</span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>/path/to/local/repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span></span><span class="xml">  --&gt;</span></code></pre><p>&nbsp;&nbsp;在下方添加一条本地仓库记录，路径写成自己创建的本地仓库文件夹路径，修改完成后如下:</p><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!-- localRepository</span></span><span class="xml">   | The path to the local repository maven will use to store artifacts.</span><span class="xml">   |</span><span class="xml">   | Default: $</span><span class="hljs-template-variable">&#123;user.home&#125;</span><span class="xml">/.m2/repository</span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>/path/to/local/repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span></span><span class="xml">  --&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\Maven\LocalRepository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span></span></code></pre><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>&nbsp;&nbsp;系统变量下新建一个变量，名称为 <strong>Maven</strong>，变量值为 Maven 解压路径，即上面的 <code>D:\Maven\apache-maven-3.5.4</code>, 然后在 path 变量下添加一条值 <code>%Maven%\bin</code>，保存退出即可。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>&nbsp;&nbsp;到此基本配置完毕了，输入以下命令测试是否成功：</p><pre><code class="hljs ada">mvn <span class="hljs-comment">--version</span></code></pre><p>&nbsp;&nbsp;返回版本号即为成功。</p>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows 10</tag>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Atom 配置代理以及自用插件整理</title>
    <link href="/2018/09/26/Atom-%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E4%BB%A5%E5%8F%8A-Markdown-%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <url>/2018/09/26/Atom-%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E4%BB%A5%E5%8F%8A-Markdown-%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Atom-配置代理"><a href="#Atom-配置代理" class="headerlink" title="Atom 配置代理"></a>Atom 配置代理</h1><p>&nbsp;&nbsp;代理需要自己准备好，方法很简单，使用以下命令即可：</p><pre><code class="hljs arduino">apm <span class="hljs-built_in">config</span> <span class="hljs-built_in">set</span> strict-ssl <span class="hljs-literal">false</span>apm <span class="hljs-built_in">config</span> <span class="hljs-built_in">set</span> http-proxy http:<span class="hljs-comment">//127.0.0.1:8080</span>apm <span class="hljs-built_in">config</span> <span class="hljs-built_in">set</span> https-proxy http:<span class="hljs-comment">//127.0.0.1:8080</span></code></pre><h1 id="Atom-插件整理"><a href="#Atom-插件整理" class="headerlink" title="Atom 插件整理"></a>Atom 插件整理</h1><h2 id="markdown-preview-plus"><a href="#markdown-preview-plus" class="headerlink" title="markdown-preview-plus"></a><a href="https://atom.io/packages/markdown-preview-plus"><strong>markdown-preview-plus</strong></a></h2><p>&nbsp;&nbsp;主要用 Atom 来写 Markdown 博客，这个插件预览就很舒服，还可以支持公式。</p><h2 id="platformio-ide-terminal"><a href="#platformio-ide-terminal" class="headerlink" title="platformio-ide-terminal"></a><a href="https://atom.io/packages/platformio-ide-terminal"><strong>platformio-ide-terminal</strong></a></h2><p>&nbsp;&nbsp;可以在 Atom 内直接使用终端进行以下操作。</p><h2 id="language-markdown"><a href="#language-markdown" class="headerlink" title="language-markdown"></a><a href="https://atom.io/packages/language-markdown"><strong>language-markdown</strong></a></h2><p>&nbsp;&nbsp;Markdown 语法补全。</p><h2 id="git-plus"><a href="#git-plus" class="headerlink" title="git-plus"></a><a href="https://atom.io/packages/git-plus"><strong>git-plus</strong></a></h2><p>&nbsp;&nbsp;git 命令拓展。</p>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Atom</tag>
      
      <tag>Markdown</tag>
      
      <tag>Proxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 10 配置 Git</title>
    <link href="/2018/09/26/Windows-10-%E9%85%8D%E7%BD%AE-Git/"/>
    <url>/2018/09/26/Windows-10-%E9%85%8D%E7%BD%AE-Git/</url>
    
    <content type="html"><![CDATA[<h1 id="下载安装-Git"><a href="#下载安装-Git" class="headerlink" title="下载安装 Git"></a>下载安装 Git</h1><p>&nbsp;&nbsp;首先从 <a href="https://git-scm.com/downloads">Git 官网</a> 下载安装包，基本保持默认选项，安装即可。</p><p>&nbsp;&nbsp;安装完成后，Git bash 或者 cmd 中可以输入 <code>git --version</code>，验证是否安装成功，输出版本号即为安装成功。</p><h1 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h1><p>&nbsp;&nbsp;安装完成有配置一下全局的用户名和邮箱，输入如下命令：</p><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">&quot;自定义用户名&quot;</span>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">&quot;邮箱&quot;</span></code></pre><p>&nbsp;&nbsp;使用如下命令可以取消全局设置：</p><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global --unset user.namegit<span class="hljs-built_in"> config </span>--global --unset user.email</code></pre><h1 id="生成-SSH-秘钥"><a href="#生成-SSH-秘钥" class="headerlink" title="生成 SSH 秘钥"></a>生成 SSH 秘钥</h1><p>&nbsp;&nbsp;输入下面的命令生成 SSH Key:</p><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;邮箱&quot;</span></code></pre><p>&nbsp;&nbsp;生成单个 SSH Key 时可以连续回车，不输入密钥文件名字和密码。生成的秘钥在 <code>C:\Users\用户名\.ssh</code> 下。其中 id_rsa.pub 为公钥，用文本编辑器打开后，复制内容添加到 Github SSH 列表中即可。</p><h1 id="托管秘钥至-ssh-agent"><a href="#托管秘钥至-ssh-agent" class="headerlink" title="托管秘钥至 ssh-agent"></a>托管秘钥至 ssh-agent</h1><p>&nbsp;&nbsp;执行以下命令即可将秘钥添加至 ssh-agent：</p><pre><code class="hljs arcade">ssh-add ~<span class="hljs-regexp">/.ssh/i</span>d_rsa</code></pre><p>&nbsp;&nbsp;添加失败时，出现错误 <code>Could not open a connection to your authentication agent</code> 可执行以下命令：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-agent bash</span></code></pre><p>&nbsp;&nbsp;再添加秘钥即可。</p><h1 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h1><p>&nbsp;&nbsp;执行以下命令：</p><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com</code></pre><p>&nbsp;&nbsp;出现类似返回内容，即为添加成功。</p><pre><code class="hljs ada">You<span class="hljs-symbol">&#x27;ve</span> successfully authenticated, but GitHub does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.</code></pre>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Windows 10</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 18.04 LTS 安装 Tex Live</title>
    <link href="/2018/09/15/Ubuntu-18-04-LTS-%E5%AE%89%E8%A3%85-Tex-Live/"/>
    <url>/2018/09/15/Ubuntu-18-04-LTS-%E5%AE%89%E8%A3%85-Tex-Live/</url>
    
    <content type="html"><![CDATA[<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>&nbsp;&nbsp;如果身在国内，推荐改用国内的镜像，比如清华大学的 tuna。以下都以这个镜像为例。</p><p>&nbsp;&nbsp;在  <a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/">https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/</a> 下载 <code>install-tl-unx.tar.gz</code>，解压并进入文件夹 <code>install-tl-20180915</code>。日期请按照你解压的文件夹名字来。</p><p>&nbsp;&nbsp;执行以下命令安装：</p><pre><code class="hljs vim">wget http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/CTAN/systems/texlive/tlnet/install-<span class="hljs-keyword">tl</span>-unx.tar.gztar -xzf install-<span class="hljs-keyword">tl</span>-unx.tar.gz<span class="hljs-keyword">cd</span> install-<span class="hljs-keyword">tl</span>-<span class="hljs-number">20180915</span>sudo ./install-<span class="hljs-keyword">tl</span></code></pre><p>&nbsp;&nbsp;没有特殊需要的话，collection 可以不必全部安装，尤其是很多小语种。不过后果是之后可能会缺包。不愿意之后手动安装，并且空间足够、网速足够，也可以全部安装。注意 TeX Live 完全安装后大约要占 6 GB 空间，安装前请务必做好准备。中途断网很可能导致安装失败。其他选项没有必要保持默认即可。</p><h3 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h3><p>&nbsp;&nbsp;此时 TeX Live 虽已安装，但其路径对于 Linux 来说仍是不可识别的。所以需要更改环境变量。</p><p>&nbsp;&nbsp;打开 <code>~/.zshrc</code> (非 zsh 用户 修改 bashrc)，在最后添加：</p><pre><code class="hljs awk">export PATH=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/texlive/</span><span class="hljs-number">2018</span><span class="hljs-regexp">/bin/</span>x86_64-linux:<span class="hljs-variable">$PATH</span>export MANPATH=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/texlive/</span><span class="hljs-number">2018</span><span class="hljs-regexp">/texmf-dist/</span>doc/man:<span class="hljs-variable">$MANPATH</span>export INFOPATH=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/texlive/</span><span class="hljs-number">2018</span><span class="hljs-regexp">/texmf-dist/</span>doc/info:<span class="hljs-variable">$INFOPATH</span></code></pre><p>&nbsp;&nbsp;还需保证开启 sudo 模式后路径仍然可用。命令行中执行</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo visudo</span></code></pre><p>&nbsp;&nbsp;找到如下一段代码</p><pre><code class="hljs properties"><span class="hljs-attr">Defaults</span>        <span class="hljs-string">env_reset</span><span class="hljs-attr">Defaults</span>        <span class="hljs-string">mail_badpass</span><span class="hljs-attr">Defaults</span>        <span class="hljs-string">secure_path=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin&quot;</span></code></pre><p>&nbsp;&nbsp;将第三行更改为:</p><pre><code class="hljs ebnf"><span class="hljs-attribute">Defaults        secure_path</span>=<span class="hljs-string">&quot;/usr/local/texlive/2018/bin/x86_64-linux:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin&quot;</span></code></pre><p>&nbsp;&nbsp;也就是加入 TeX Live 的执行路径。如果在安装时作了修改，这里的路径也都要与安装时的保持一致。</p><h3 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h3><p>&nbsp;&nbsp;要在整个系统中使用 TeX 字体，还需要将 TeX 自带的配置文件复制到系统目录下。命令行中执行:</p><pre><code class="hljs awk">sudo cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/texlive/</span><span class="hljs-number">2018</span><span class="hljs-regexp">/texmf-var/</span>fonts<span class="hljs-regexp">/conf/</span>texlive-fontconfig.conf <span class="hljs-regexp">/etc/</span>fonts<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">09</span>-texlive.conf</code></pre><p>&nbsp;&nbsp;之后再执行</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo fc-cache -fv</span></code></pre><p>&nbsp;&nbsp;刷新字体数据库。</p><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>&nbsp;&nbsp;到此整个 TeX Live 2018 就已经安装完毕。可以做下面的一些检查：</p><p>&nbsp;&nbsp;基本命令：</p><pre><code class="hljs ada">tlmgr <span class="hljs-comment">--version</span>pdftex <span class="hljs-comment">--version</span>xetex <span class="hljs-comment">--version</span>luatex <span class="hljs-comment">--version</span></code></pre><p>&nbsp;&nbsp;包管理器：</p><pre><code class="hljs pgsql">sudo tlmgr <span class="hljs-keyword">update</span> <span class="hljs-comment">--list</span></code></pre><p>&nbsp;&nbsp;这一步是检查更新，如果有就顺手更了吧：</p><pre><code class="hljs n1ql">sudo tlmgr <span class="hljs-keyword">update</span> --<span class="hljs-keyword">self</span> --<span class="hljs-keyword">all</span></code></pre><p>&nbsp;&nbsp;<code>--self</code> 用来更新 <code>tlmgr</code> 自身，如果上一步没有提示可以不加这个选项。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>&nbsp;&nbsp;可以编译一个简短的测试文件：</p><pre><code class="hljs latex"><span class="hljs-comment">% hello.tex</span><span class="hljs-tag">\<span class="hljs-name">documentclass</span><span class="hljs-string">[UTF8]</span><span class="hljs-string">&#123;ctexart&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">begin</span><span class="hljs-string">&#123;document&#125;</span></span>欢迎来到 <span class="hljs-tag">\<span class="hljs-name">TeX</span><span class="hljs-string">&#123;&#125;</span></span> 世界！<span class="hljs-tag">\<span class="hljs-name">end</span><span class="hljs-string">&#123;document&#125;</span></span></code></pre><p>&nbsp;&nbsp;用 xelatex 或 lualatex 编译：</p><pre><code class="hljs properties"><span class="hljs-attr">xelatex</span> <span class="hljs-string">hello</span><span class="hljs-attr">lualatex</span> <span class="hljs-string">hello</span></code></pre><p>&nbsp;&nbsp;编译得到的 PDF 文件如果显示正常，则说明 TeX Live 基本工作正常。</p>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
      <tag>Tex Live</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 使用 MathJax 渲染公式并解决渲染冲突问题</title>
    <link href="/2018/09/11/Hexo-%E4%BD%BF%E7%94%A8-MathJax-%E6%B8%B2%E6%9F%93%E5%85%AC%E5%BC%8F%E5%B9%B6%E8%A7%A3%E5%86%B3%E6%B8%B2%E6%9F%93%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/"/>
    <url>/2018/09/11/Hexo-%E4%BD%BF%E7%94%A8-MathJax-%E6%B8%B2%E6%9F%93%E5%85%AC%E5%BC%8F%E5%B9%B6%E8%A7%A3%E5%86%B3%E6%B8%B2%E6%9F%93%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;Hexo 是默认支持 mathjax 公式渲染的，但依然需要解决渲染冲突。</p><h1 id="更改渲染引擎"><a href="#更改渲染引擎" class="headerlink" title="更改渲染引擎"></a>更改渲染引擎</h1><p>&nbsp;&nbsp;卸载默认渲染引擎并安装另一个：</p><pre><code class="hljs sql">npm <span class="hljs-keyword">uninstall</span> hexo-renderer-marked <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-renderer-kramed <span class="hljs-comment">--save</span></code></pre><p>&nbsp;&nbsp;这里的安装可能出问题，可以先更新一下 npm 再安装（需要权限）：</p><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g <span class="hljs-built_in">npm</span></code></pre><h1 id="解决渲染冲突"><a href="#解决渲染冲突" class="headerlink" title="解决渲染冲突"></a>解决渲染冲突</h1><p>&nbsp;&nbsp;然后更改  <code>/node_modules/hexo-renderer-kramed/lib/renderer.js</code> 中的：</p><pre><code class="hljs pgsql">// Change <span class="hljs-keyword">inline</span> math <span class="hljs-keyword">rule</span><span class="hljs-keyword">function</span> formatText(<span class="hljs-type">text</span>) &#123;    // Fit kramed<span class="hljs-string">&#x27;s rule: $$ + \1 + $$</span><span class="hljs-string">    return text.replace(/`\$(.*?)\$`/g, &#x27;</span>$$<span class="ruby">$$</span><span class="hljs-meta">$1</span>$$<span class="ruby">$$</span><span class="hljs-string">&#x27;);</span><span class="hljs-string">&#125;</span></code></pre><p>&nbsp;&nbsp;为：</p><pre><code class="hljs pgsql">// Change <span class="hljs-keyword">inline</span> math <span class="hljs-keyword">rule</span><span class="hljs-keyword">function</span> formatText(<span class="hljs-type">text</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-type">text</span>;&#125;</code></pre><p>&nbsp;&nbsp;然后找到博客目录下的 <code>/node_modules/kramed/lib/rules/inline.js</code><br>进行下列修改：</p><pre><code class="hljs latex">//escape: /^<span class="hljs-tag">\<span class="hljs-name">\</span></span>([<span class="hljs-tag">\<span class="hljs-name">\</span></span>`*&#123;&#125;<span class="hljs-tag">\<span class="hljs-name">[</span></span><span class="hljs-tag">\<span class="hljs-name">]</span></span>()#<span class="hljs-formula">$+<span class="hljs-tag">\<span class="hljs-name">-</span></span>.!_&gt;])/,      第11行，将其修改为</span><span class="hljs-formula">escape: /^<span class="hljs-tag">\<span class="hljs-name">\</span></span>([`*<span class="hljs-tag">\<span class="hljs-name">[</span></span><span class="hljs-tag">\<span class="hljs-name">]</span></span>()#$</span>+<span class="hljs-tag">\<span class="hljs-name">-</span></span>.!_&gt;])/,//em: /^<span class="hljs-tag">\<span class="hljs-name">b</span></span>_((?:__|[<span class="hljs-tag">\<span class="hljs-name">s</span></span><span class="hljs-tag">\<span class="hljs-name">S</span></span>])+?)_<span class="hljs-tag">\<span class="hljs-name">b</span></span>|^<span class="hljs-tag">\<span class="hljs-name">*</span></span>((?:<span class="hljs-tag">\<span class="hljs-name">*</span></span><span class="hljs-tag">\<span class="hljs-name">*</span></span>|[<span class="hljs-tag">\<span class="hljs-name">s</span></span><span class="hljs-tag">\<span class="hljs-name">S</span></span>])+?)<span class="hljs-tag">\<span class="hljs-name">*</span></span>(?!<span class="hljs-tag">\<span class="hljs-name">*</span></span>)/,    第20行，将其修改为em: /^<span class="hljs-tag">\<span class="hljs-name">*</span></span>((?:<span class="hljs-tag">\<span class="hljs-name">*</span></span><span class="hljs-tag">\<span class="hljs-name">*</span></span>|[<span class="hljs-tag">\<span class="hljs-name">s</span></span><span class="hljs-tag">\<span class="hljs-name">S</span></span>])+?)<span class="hljs-tag">\<span class="hljs-name">*</span></span>(?!<span class="hljs-tag">\<span class="hljs-name">*</span></span>)/,</code></pre><p>&nbsp;&nbsp;上面的改动取消了公式中 <code>_</code> 的渲染，原本会被渲染为 <code>&lt;em&gt;</code> 标签以表示斜体，在公式中表示下标。另外还取消了 <code>\, &#123;, &#125;</code> 的转义。</p><p>&nbsp;&nbsp;此时出现在公式中下标和换行的问题就完美解决了。</p><h1 id="使用-LATEX-编辑公式"><a href="#使用-LATEX-编辑公式" class="headerlink" title="使用 LATEX 编辑公式"></a>使用 LATEX 编辑公式</h1><p>&nbsp;&nbsp;MathJax 是一个开源 JavaScript 库。它支持 LaTeX、MathML、AsciiMath 符号，可以运行于所有流行浏览器上。</p><p>&nbsp;&nbsp;这里已经配置好了，我们只需要了解 LATEX 语法来书写公式就可以了。</p><p>&nbsp;&nbsp;至于 LATEX 语法可参考:</p><ul><li><a href="https://blog.csdn.net/u010185803/article/details/50865150">markdown使用LaTex输入数学公式类</a></li><li><a href="https://www.zybuluo.com/codeep/note/163962#6%EF%BF%AF%EF%BE%BF%EF%BE%A5%EF%BF%AF%EF%BE%BE%EF%BE%A6%EF%BF%AF%EF%BE%BE%EF%BE%82%EF%BF%AF%EF%BE%BF%EF%BE%A4%EF%BF%AF%EF%BE%BE%EF%BE%BD%EF%BF%AF%EF%BE%BE%EF%BE%95%EF%BF%AF%EF%BE%BF%EF%BE%A8%EF%BF%AF%EF%BE%BE%EF%BE%BE%EF%BF%AF%EF%BE%BE%EF%BE%93%EF%BF%AF%EF%BE%BF%EF%BE%A5%EF%BF%AF%EF%BE%BE%EF%BE%85%EF%BF%AF%EF%BE%BE%EF%BE%A5%EF%BF%AF%EF%BE%BF%EF%BE%A7%EF%BF%AF%EF%BE%BE%EF%BE%9C%EF%BF%AF%EF%BE%BE%EF%BE%81%EF%BF%AF%EF%BE%BF%EF%BE%A7%EF%BF%AF%EF%BE%BE%EF%BE%95%EF%BF%AF%EF%BE%BE%EF%BE%A5%EF%BF%AF%EF%BE%BF%EF%BE%A5%EF%BF%AF%EF%BE%BE%EF%BE%8F%EF%BF%AF%EF%BE%BE%EF%BE%B7">Cmd Markdown 公式指导手册</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>MathJax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Atom 中快速输入时间戳</title>
    <link href="/2018/09/03/%E5%9C%A8-Atom-%E4%B8%AD%E5%BF%AB%E9%80%9F%E8%BE%93%E5%85%A5%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    <url>/2018/09/03/%E5%9C%A8-Atom-%E4%B8%AD%E5%BF%AB%E9%80%9F%E8%BE%93%E5%85%A5%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>&nbsp;&nbsp;如何在 Atom 中可以快速插入时间戳？</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="修改-Atom-启动脚本"><a href="#修改-Atom-启动脚本" class="headerlink" title="修改 Atom 启动脚本"></a>修改 Atom 启动脚本</h2><p>&nbsp;&nbsp;在 atom 中选择 <code>edit</code> -&gt; <code>Preferences</code>会弹出 <code>Settings</code> 标签页，选择底部的 <code>Open Config Folder</code>，此时在弹出窗口找到 <code>~/.atom/init.coffee</code> ，在文件中添加如下代码：</p><pre><code class="hljs js">daysOfWeek = [<span class="hljs-string">&#x27;日&#x27;</span>, <span class="hljs-string">&#x27;一&#x27;</span>, <span class="hljs-string">&#x27;二&#x27;</span>, <span class="hljs-string">&#x27;三&#x27;</span>, <span class="hljs-string">&#x27;四&#x27;</span>, <span class="hljs-string">&#x27;五&#x27;</span>, <span class="hljs-string">&#x27;六&#x27;</span>]pad = (str, length) -&gt;  str = <span class="hljs-built_in">String</span>(str)  str = <span class="hljs-string">&#x27;0&#x27;</span> + str  <span class="hljs-keyword">while</span>(str.length &lt; length)  strdateOrTime = (kind) -&gt;  now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()  yyyy = now.getYear() + <span class="hljs-number">1900</span>  mm = pad(now.getMonth() + <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)  dd = pad(now.getDate(), <span class="hljs-number">2</span>)  ddd = daysOfWeek[now.getDay()]  hh24 = pad(now.getHours(), <span class="hljs-number">2</span>)  mi = pad(now.getMinutes(), <span class="hljs-number">2</span>)  ss = pad(now.getSeconds(), <span class="hljs-number">2</span>)  <span class="hljs-keyword">if</span> kind == <span class="hljs-number">1</span>    <span class="hljs-string">&quot;#&#123;yyyy&#125;-#&#123;mm&#125;-#&#123;dd&#125; #&#123;ddd&#125;)&quot;</span>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> kind == <span class="hljs-number">2</span>    <span class="hljs-string">&quot;#&#123;hh24&#125;:#&#123;mi&#125;:#&#123;ss&#125;&quot;</span>  <span class="hljs-keyword">else</span>    # &quot;#&#123;yyyy&#125;-#&#123;mm&#125;-#&#123;dd&#125;(#&#123;ddd&#125;) #&#123;hh24&#125;:#&#123;mi&#125;:#&#123;ss&#125;&quot;    <span class="hljs-string">&quot;#&#123;yyyy&#125;-#&#123;mm&#125;-#&#123;dd&#125; #&#123;hh24&#125;:#&#123;mi&#125;:#&#123;ss&#125;&quot;</span>insertText = (str) -&gt;  <span class="hljs-keyword">return</span> unless editor = atom.workspace.getActiveTextEditor()  selection = editor.getLastSelection()  selection.insertText(str)atom.commands.add <span class="hljs-string">&#x27;atom-text-editor&#x27;</span>, <span class="hljs-string">&#x27;atom-date:date&#x27;</span>, -&gt;  insertText(dateOrTime(<span class="hljs-number">1</span>))atom.commands.add <span class="hljs-string">&#x27;atom-text-editor&#x27;</span>, <span class="hljs-string">&#x27;atom-date:time&#x27;</span>, -&gt;  insertText(dateOrTime(<span class="hljs-number">2</span>))atom.commands.add <span class="hljs-string">&#x27;atom-text-editor&#x27;</span>, <span class="hljs-string">&#x27;atom-date:datetime&#x27;</span>, -&gt;  insertText(dateOrTime(<span class="hljs-number">0</span>))</code></pre><h2 id="设置快捷键"><a href="#设置快捷键" class="headerlink" title="设置快捷键"></a>设置快捷键</h2><p>&nbsp;&nbsp;编辑同一目录下的 <code>keymap.cson</code>，在里面添加如下代码：</p><pre><code class="hljs scheme"><span class="hljs-symbol">&#x27;atom-text-editor</span><span class="hljs-symbol">&#x27;:</span>  <span class="hljs-symbol">&#x27;alt-d</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;atom-date:date</span>&#x27;  <span class="hljs-symbol">&#x27;alt-t</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;atom-date:time</span>&#x27;  <span class="hljs-symbol">&#x27;alt-n</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;atom-date:datetime</span>&#x27;</code></pre><p>&nbsp;&nbsp;保存后重启 Atom。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p><code>Alt + d</code> : <code>2018-09-03-一)</code></p><p><code>Alt + t</code> : <code>18:44:41</code></p><p><code>Alt + n</code> : <code>2018-09-03 18:44:59</code></p>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Atom</tag>
      
      <tag>timestamps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 博客 Hiker 主题增加文章最后编辑时间，并按照最后编辑时间排序</title>
    <link href="/2018/09/03/Hexo-%E5%8D%9A%E5%AE%A2-Hiker-%E4%B8%BB%E9%A2%98%E5%A2%9E%E5%8A%A0%E6%96%87%E7%AB%A0%E6%9C%80%E5%90%8E%E7%BC%96%E8%BE%91%E6%97%B6%E9%97%B4%EF%BC%8C%E5%B9%B6%E6%8C%89%E7%85%A7%E6%9C%80%E5%90%8E%E7%BC%96%E8%BE%91%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/"/>
    <url>/2018/09/03/Hexo-%E5%8D%9A%E5%AE%A2-Hiker-%E4%B8%BB%E9%A2%98%E5%A2%9E%E5%8A%A0%E6%96%87%E7%AB%A0%E6%9C%80%E5%90%8E%E7%BC%96%E8%BE%91%E6%97%B6%E9%97%B4%EF%BC%8C%E5%B9%B6%E6%8C%89%E7%85%A7%E6%9C%80%E5%90%8E%E7%BC%96%E8%BE%91%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;写在前面，建好了 Hexo 博客之后，慢慢的文章也写了十几篇了，发现一个问题：无法知道这篇文章最后更新于什么时候。一篇文章发布得越早，就在越下面，可是我想让它把我重新编辑过的文章排到前头来啊，同时也想让文章能够显示最后更新于什么时候。有需求那就去解决啊，可是搜索了谷歌、百度，发现全世界都用的是 Next 主题，给的方案也是针对 Next 主题的，对我所用的 <code>Hiker 主题</code>完全不适用啊，于是，经过一番摸索，就有了这篇文章。废话结束了，下面开始正文。</p><h1 id="开启-Updated-排序"><a href="#开启-Updated-排序" class="headerlink" title="开启 Updated 排序"></a>开启 Updated 排序</h1><p>&nbsp;&nbsp;在 Hexo 内部，是支持 updated 这个参数的，意思就是，你在建立文章的时候，已经默认地给你添加了一个名为 update 的参数。但这个数据只是添加在 db.json 中，并不会添加到你的 md 文件中。但它的效果其实和你直接在 md 文件中写是一样的，像下面这样：</p><pre><code class="hljs subunit">title:date:updated:<span class="hljs-keyword">tags:</span>categories:</code></pre><p>&nbsp;&nbsp;但是写在 md 文件中更加的方便，能够手动的控制更新日期，避免 db.json 被删除后，‘更新日期’数据丢失的情况出现。因此我们需要让 Hexo 默认生成的 post格式中存在 <code>updated</code> 这个属性，以免每次需要手动输入。(手写是不可能手写的，这辈子都不可能的)</p><h2 id="调整-post-默认生成格式"><a href="#调整-post-默认生成格式" class="headerlink" title="调整 post 默认生成格式"></a>调整 post 默认生成格式</h2><p>&nbsp;&nbsp;我的 Hexo 博客主目录为 <code>Hexo</code>，之后的操作就在这个目录下了。 post 的生成模板在  <code>Hexo/scaffolds/</code> 里，那个 <code>post.md</code>就是了。打开这个文件，因为生成的时候发布时间和最后更新时间一样的嘛，改成如下内容后保存即可：</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> &#123;&#123; <span class="hljs-string">title</span> &#125;&#125;<span class="hljs-attr">date:</span> &#123;&#123; <span class="hljs-string">date</span> &#125;&#125;<span class="hljs-attr">updated:</span> &#123;&#123; <span class="hljs-string">date</span> &#125;&#125;<span class="hljs-meta">---</span></code></pre><p>&nbsp;&nbsp;这个时候你就可以生成一篇新的博客看看有没有效果了。你想加别的内容也是这样修改。之后修改了文章内容之后，把 updated 后面的时间改一下就 OK 了。</p><p>&nbsp;&nbsp;使用 Atom 写博客的快速输入 update 时间戳，可以查看 <a href="/2018/09/03/%E5%9C%A8-Atom-%E4%B8%AD%E5%BF%AB%E9%80%9F%E8%BE%93%E5%85%A5%E6%97%B6%E9%97%B4%E6%88%B3/" title="在 Atom 中快速输入时间戳">在 Atom 中快速输入时间戳</a></p><h2 id="调整-Hexo-主配置文件"><a href="#调整-Hexo-主配置文件" class="headerlink" title="调整 Hexo 主配置文件"></a>调整 Hexo 主配置文件</h2><p>&nbsp;&nbsp;然后找到主配置文件 <code>_config.yml</code>（<strong>注意：不是主题的 _config.yml</strong>），修改 index_generator 的 order_by 为 -updated 即可开启更新时间排序，你最后修改过的文章就会显示到最前面了:</p><pre><code class="hljs sas"># Home <span class="hljs-meta">page</span> setting# path: Root path for your blogs <span class="hljs-meta">index</span> <span class="hljs-meta">page</span>. (default = <span class="hljs-string">&#x27;&#x27;</span>)# per_page: Posts displayed per <span class="hljs-meta">page</span>. (0 = disable pagination)# order_by: Posts <span class="hljs-meta">order</span>. (<span class="hljs-meta">Order</span> <span class="hljs-meta">by</span> date descending <span class="hljs-meta">by</span> default)index_generator:  path: <span class="hljs-string">&#x27;&#x27;</span>  per_page: 10  order_by: -updated</code></pre><p>&nbsp;&nbp;但是你发现修改过之后，文章只显示到时期，根本看不到时间对不对，那么继续修改 date_format 部分，改成如下的 <code>YYYY-MM-DD HH:mm:ss</code>格式，再重新生成一下网页就能看到具体的时间了。</p><pre><code class="hljs clean"># Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format <span class="hljs-keyword">as</span> defined <span class="hljs-keyword">in</span>## http:<span class="hljs-comment">//momentjs.com/docs/#/displaying/format/</span>date_format: YYYY-MM-DD HH:mm:sstime_format: HH:mm:ss</code></pre><h1 id="修改-Hiker-主题"><a href="#修改-Hiker-主题" class="headerlink" title="修改 Hiker 主题"></a>修改 Hiker 主题</h1><p>&nbsp;&nbsp;Hiker 主题默认是没有更新时间显示的，所以需要自己修改，新增一个更新时间显示。<code>hiker</code> 文件夹位于 <code>Hexo/themes/hiker</code> 。首先查看了 <code>hiker/layout</code> 文件夹下的 <code>post.ejs</code> 文件，发现里面引入的是 <code>_partial/article</code>的内容，好的，找到  <code>hiker/layout/_partial</code> 文件夹下的 <code>article.ejs</code>，因为是修改时间嘛，那就找 date 相关的内容，于是找到了 9-13 行：</p><pre><code class="hljs mojolicious"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;article-meta&quot;</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="perl">- partial(<span class="hljs-string">&#x27;post/date&#x27;</span>, &#123;class_name: <span class="hljs-string">&#x27;article-date&#x27;</span>, date_format: null&#125;) </span><span class="xml"><span class="hljs-tag">%&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="perl">- partial(<span class="hljs-string">&#x27;post/category&#x27;</span>) </span><span class="xml"><span class="hljs-tag">%&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="perl">- partial(<span class="hljs-string">&#x27;post/busuanzi-analytics&#x27;</span>,&#123;<span class="hljs-keyword">index</span>: <span class="hljs-keyword">index</span>, class_name: <span class="hljs-string">&#x27;article-views&#x27;</span>&#125;) </span><span class="xml"><span class="hljs-tag">%&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></code></pre><p>&nbsp;&nbsp;看第10行，原来是引用的 <code>post/date</code>，那就打开 <code>hiker/layout/_partial/post</code> 文件夹下的 <code>date.ejs</code>，看到如下内容：</p><pre><code class="hljs erb"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="ruby"> <span class="hljs-keyword">if</span> (!is_current(<span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-literal">false</span>))&#123; </span><span class="xml"><span class="hljs-tag">%&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;%-</span></span></span><span class="ruby"> url_for(post.path) </span><span class="xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&lt;%=</span></span></span><span class="ruby"> class_name </span><span class="xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;&lt;%=</span></span></span><span class="ruby"> date_xml(post.date) </span><span class="xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">&quot;datePublished&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span></span></span><span class="ruby"> date(post.date, date_format) </span><span class="xml"><span class="hljs-tag">%&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="hljs-tag">%&gt;</span></span></code></pre><p>&nbsp;&nbsp;到这里也就清楚了，我们主要需要关注的文件是 <code>hiker/layout/_partial/post/date.ejs</code>、<code>hiker/layout/_partial/article.ejs</code>，这两个文件。那么接下来开始修改。</p><h2 id="新建-updated-ejs-文件"><a href="#新建-updated-ejs-文件" class="headerlink" title="新建 updated.ejs 文件"></a>新建 updated.ejs 文件</h2><p>&nbsp;&nbsp;由于 <code>date.ejs</code> 这个文件在很多地方会被引用到，可谓是牵一发而动全身啊，如果你改在这个文件上，就会发现所有原本出现发布时间的地方同时还会有更新时间，看上去真的是有点丑啊。我不需要它在文章正文以外的部分出现更新时间，所以选择新建一个 <code>updated.ejs</code> 文件，就放在 <code>date.ejs</code> 所在的 post 文件夹。<br><code>Updated.ejs</code> 内容如下：</p><pre><code class="hljs erb"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="ruby"> <span class="hljs-keyword">if</span> (!is_current(<span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-literal">false</span>))&#123; </span><span class="xml"><span class="hljs-tag">%&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;%-</span></span></span><span class="ruby"> url_for(post.path) </span><span class="xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&lt;%=</span></span></span><span class="ruby"> class_name </span><span class="xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">%=</span></span></span><span class="ruby"> _<span class="hljs-number">_</span>(<span class="hljs-string">&#x27;updated&#x27;</span>) </span><span class="xml"><span class="hljs-tag">%&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;&lt;%=</span></span></span><span class="ruby"> date_xml(post.updated) </span><span class="xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">&quot;dateUpdated&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span></span></span><span class="ruby"> date(post.updated, date_format) </span><span class="xml"><span class="hljs-tag">%&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="hljs-tag">%&gt;</span></span></code></pre><p>&nbsp;&nbsp;大体上与 date.ejs 内容相仿，post.date 改成了 post.updated，细心的读者还会发现，多了一个 <code>&lt;%= __(&#39;updated&#39;) %&gt;</code>，这是因为原来的格式只显示时间，那么当我们全部修改好之后，就会发现文章下面确实有两个时间，但不知道哪个是哪个，看的人很乱（这里不接受修改时间当然比发布时间迟的一看就知道了这样的吐槽），为了用户体验，还是加上提示比较好。同样的，可以将 <code>date.ejs</code> 的内容修改成如下所示：</p><pre><code class="hljs erb"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="ruby"> <span class="hljs-keyword">if</span> (!is_current(<span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-literal">false</span>))&#123; </span><span class="xml"><span class="hljs-tag">%&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;%-</span></span></span><span class="ruby"> url_for(post.path) </span><span class="xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&lt;%=</span></span></span><span class="ruby"> class_name </span><span class="xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">%=</span></span></span><span class="ruby"> _<span class="hljs-number">_</span>(<span class="hljs-string">&#x27;published&#x27;</span>) </span><span class="xml"><span class="hljs-tag">%&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;&lt;%=</span></span></span><span class="ruby"> date_xml(post.date) </span><span class="xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">&quot;datePublished&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span></span></span><span class="ruby"> date(post.date, date_format) </span><span class="xml"><span class="hljs-tag">%&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="hljs-tag">%&gt;</span></span></code></pre><h2 id="增加字段"><a href="#增加字段" class="headerlink" title="增加字段"></a>增加字段</h2><p>&nbsp;&nbsp;由于 date.ejs 和 updated.ejs 中分别引入了 published 和 updated 字段，因此我们需要去在语言文件中新增对应的字段，语言文件在 <code>hiker/languages</code>中，你博客设置成什么语言，就修改对应的语言文件，没指定就修改 default.yml 文件。这里以 default.yml 为例，打开文件，在最上面增加两行：</p><pre><code class="hljs avrasm"><span class="hljs-symbol">published:</span> Published<span class="hljs-symbol">updated:</span> Updated</code></pre><p>&nbsp;&nbsp;保存退出即可。简单解释一下，格式为<code>字段名：字段值</code>，字段名不变，字段值可以随意更改。</p><h2 id="修改-article-ejs-文件"><a href="#修改-article-ejs-文件" class="headerlink" title="修改 article.ejs 文件"></a>修改 article.ejs 文件</h2><p>&nbsp;&nbsp;新增了一个 update.ejs 文件，我们需要将它引用进去。打开 article.ejs 文件，找到第 10 行： <code>&lt;%- partial(&#39;post/date&#39;, &#123;class_name: &#39;article-date&#39;, date_format: null&#125;) %&gt;</code>，在下面添加一行 <code>&lt;%- partial(&#39;post/updated&#39;, &#123;class_name: &#39;article-date&#39;, date_format: null&#125;) %&gt;</code>，保存退出即可。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>&nbsp;&nbsp;执行一下 <code>hexo g</code>、<code>hexo server</code> 看看效果：<br><img src="https://s1.ax1x.com/2018/09/03/Pz4bi4.png"></p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Hiker</tag>
      
      <tag>Updated</tag>
      
      <tag>更新时间</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 18.04 LTS Putty 字体设置</title>
    <link href="/2018/09/02/Ubuntu-18-04-LTS-Putty-%E5%AD%97%E4%BD%93%E8%AE%BE%E7%BD%AE/"/>
    <url>/2018/09/02/Ubuntu-18-04-LTS-Putty-%E5%AD%97%E4%BD%93%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;在 Ubuntu 下 putty 的字体可以说是小得辣眼睛了，难受的不得了。接下来讲讲怎么换字体及设置字号，以及设置窗体行列数来让代码显示舒服一点。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>&nbsp;&nbsp;个人而言，比较喜欢 consola 字体，因此在网上找到了网友制作的<code>微软雅黑 consola 混合字体</code>，安装到系统上后准备工作就完成了。当然你可以选择你自己喜欢的字体。</p><h4 id="更改-putty-字体"><a href="#更改-putty-字体" class="headerlink" title="更改 putty 字体"></a>更改 putty 字体</h4><p>&nbsp;&nbsp;运行 <code>putty SSH client</code> 后，可以看到左侧有一个菜单，选择里面的 Window 下 的 Fonts 标签，可以看到如下画面：<br><img src="https://s1.ax1x.com/2018/09/03/PzFxYQ.png"><br>&nbsp;&nbsp;在上面的图中，<code>Font used for ordinary text</code> 部分就是修改字体的地方那个了，当然，呈现的画面是我已经修改好了的结果。点击 旁边的 <code>change...</code> 按钮，会出来以下画面：<br><img src="https://s1.ax1x.com/2018/09/03/PzFzWj.png"><br>&nbsp;&nbsp;找不到你安装的字体的话记得把第四个勾勾上，选择好之后点 <code>OK</code>就行了。</p><h4 id="更改窗体显示行列数"><a href="#更改窗体显示行列数" class="headerlink" title="更改窗体显示行列数"></a>更改窗体显示行列数</h4><p>&nbsp;&nbsp;更改了字体及字号之后，原来的窗体就显得有些小了。点击左侧的 <code>Window</code> 标签，如图所示修改其中的 Columns 和 Rows 即可：<br><img src="https://s1.ax1x.com/2018/09/03/PzFvFg.png"></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>&nbsp;&nbsp;修改好之后，千万要记得回到 <code>Session</code> 标签保存下来啊，不然下一次还要在来一遍。</p>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
      <tag>Putty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 主题同步</title>
    <link href="/2018/09/02/Hexo-%E4%B8%BB%E9%A2%98%E5%90%8C%E6%AD%A5/"/>
    <url>/2018/09/02/Hexo-%E4%B8%BB%E9%A2%98%E5%90%8C%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>写在前面，本篇解决方案针对的是以 <a href="/2018/09/01/Ubuntu-18.04-LTS-GitHub-Pages-Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/" title="Ubuntu 18.04 LTS GitHub Pages + Hexo 搭建博客">Ubuntu 18.04 LTS GitHub Pages + Hexo 搭建博客</a> 搭建出来的 Hexo 博客，但对一般搭建方法也有一定参考价值，具体请自行判断。</p></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>&nbsp;&nbsp;由于修改<code>hexo</code>主题的默认设置需要使用<code>git</code>管理来方便备份，所以如何同步主题的设置也是一件很重要的事。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>&nbsp;&nbsp;<a href="https://github.com/iTimeTraveler/hexo-theme-hiker">Hiker</a>的使用方法</p><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/iTimeTraveler/</span>hexo-theme-hiker.git themes/hiker</code></pre><p>&nbsp;&nbsp;这样配置完其实<code>thems/next/</code>就是一个包含<code>.git/</code>的子项目仓库。所以在<code>push</code>主项目的时候不会上传子项目，子项目的文件夹是灰的，并且里面是空的。所以从远程仓库拉取的项目中是没有 Hiker 主题的。</p><a id="more"></a><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>&nbsp;&nbsp;使用<code>fork + subtree</code>来解决这个问题。</p><p>&nbsp;&nbsp;首先要 fork 一下 Hiker 这个项目，然后拉取到本地做修改，修改好后 push 到远程仓库。然后用<code>git subtree</code>把<code>themes/hiker/</code>当做子项目来统一管理。</p><h3 id="创建-subtree-步骤"><a href="#创建-subtree-步骤" class="headerlink" title="创建 subtree 步骤"></a>创建 subtree 步骤</h3><ul><li><p>首先进入 Hexo 博客所在的目录，本例子中是 <code>Hexo</code>。</p></li><li><p>新建名为 <code>themes</code> 的分支:</p><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch themes</span></code></pre><p>切换到 <code>themes</code> 分支:</p><pre><code class="hljs ebnf"><span class="hljs-attribute">git checkout themes</span></code></pre></li><li><p>绑定 <code>fork</code> 的 <code>hiker</code> 仓库：</p><pre><code class="hljs shell">git remote add -f hiker git@github.com:username/hexo-theme-hiker.git</code></pre></li><li><p>添加 <code>subtree</code>：</p><pre><code class="hljs routeros">git subtree <span class="hljs-builtin-name">add</span> <span class="hljs-attribute">--prefix</span>=themes/hiker hiker master</code></pre><p>这样就把 <code>fork</code> 之后的 <code>hiker</code> 的 <code>master</code> 分支所有 <code>checkout</code>出来的文件作为一次提交加到了 <code>Hexo</code> 项目的 <code>themes</code> 分支中。</p></li><li><p>合并 <code>themes</code> 分支到主分支 source：</p><pre><code class="hljs properties"><span class="hljs-attr">git</span> <span class="hljs-string">checkout source</span><span class="hljs-attr">git</span> <span class="hljs-string">merge themes --squash</span><span class="hljs-attr">git</span> <span class="hljs-string">commit</span></code></pre></li></ul><h3 id="提交对主题配置文件的修改"><a href="#提交对主题配置文件的修改" class="headerlink" title="提交对主题配置文件的修改"></a>提交对主题配置文件的修改</h3><pre><code class="hljs properties"><span class="hljs-attr">git</span> <span class="hljs-string">checkout themes</span><span class="hljs-attr">git</span> <span class="hljs-string">merge source</span><span class="hljs-attr">git</span> <span class="hljs-string">subtree push --prefix=themes/hiker hiker master</span></code></pre><p>&nbsp;&nbsp;这样提交之后 <code>fork</code> 的 <code>hiker</code> 主题仓库也会保持更新。</p><h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><pre><code class="hljs properties"><span class="hljs-attr">git</span> <span class="hljs-string">checkout themes</span><span class="hljs-attr">git</span> <span class="hljs-string">subtree pull --prefix=themes/hiker hiker master</span><span class="hljs-attr">git</span> <span class="hljs-string">checkout source</span><span class="hljs-attr">git</span> <span class="hljs-string">merge themes --squash</span><span class="hljs-attr">git</span> <span class="hljs-string">commit</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>主题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些小技巧</title>
    <link href="/2018/09/02/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2018/09/02/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h5 id="获取-github-中图片等文件的-raw-链接"><a href="#获取-github-中图片等文件的-raw-链接" class="headerlink" title="获取 github 中图片等文件的 raw 链接"></a>获取 github 中图片等文件的 raw 链接</h5><p>&nbsp;&nbsp;先在 github 仓库中找到该文件，点击该文件，打开后在浏览器的 url 后面加上 <code>？raw=true</code> ，并回车跳转，即可获取该文件的 raw 链接。</p><h5 id="Hexo-博客站内文章链接"><a href="#Hexo-博客站内文章链接" class="headerlink" title="Hexo 博客站内文章链接"></a>Hexo 博客站内文章链接</h5><p>&nbsp;&nbsp;首先需要知道要链接的站内文章的 md 文件的文件名（不包含 <code>.md</code>），以如下形式即可形成链接，其中显示文字部分可选，不填则会自动显示该文章标题：</p><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">post_link</span> 文件名 显示文字 %&#125;</span></code></pre><h5 id="Hexo-Hiker-主题中-about、categories、tags-页面不可用"><a href="#Hexo-Hiker-主题中-about、categories、tags-页面不可用" class="headerlink" title="Hexo Hiker 主题中 about、categories、tags 页面不可用"></a>Hexo Hiker 主题中 about、categories、tags 页面不可用</h5><p>&nbsp;&nbsp;是因为这几个页面没有生成，需要手动生成一次：</p><pre><code class="hljs routeros">hexo new<span class="hljs-built_in"> page </span>tagshexo new<span class="hljs-built_in"> page </span>categorieshexo new<span class="hljs-built_in"> page </span>about</code></pre><p>&nbsp;&nbsp;还需要做一些修改</p><ol><li>编辑 <code>source/tags/index.md</code>，在 date 下面一行加上一行 <code>layout: tags</code></li><li>编辑 <code>source/categories/index.md</code>，在 date 下面一行加上 <code>layout: categories</code></li><li>编辑 <code>source/about/index.md</code>，在 date 下面一行加上 <code>layout: about</code></li><li>删除 <code>db.json</code></li><li>执行 <code>hexo clean</code></li><li>执行 <code>hexo g</code></li></ol><p>&nbsp;&nbsp;注意：about 页面的内容需要自己手动编写。</p><h5 id="使生成的-Hexo-post-默认带有-categories属性"><a href="#使生成的-Hexo-post-默认带有-categories属性" class="headerlink" title="使生成的 Hexo post 默认带有 categories属性"></a>使生成的 Hexo post 默认带有 <code>categories</code>属性</h5><p>&nbsp;&nbsp;编辑 <code>scaffolds\post.md</code>，在里面添加一行 <code>categories:</code>即可。</p><h5 id="Hexo-关闭某一篇文章的评论功能"><a href="#Hexo-关闭某一篇文章的评论功能" class="headerlink" title="Hexo 关闭某一篇文章的评论功能"></a>Hexo 关闭某一篇文章的评论功能</h5><p>&nbsp;&nbsp;只需要在标题下添加一行 <code>comments: false </code> 即可。</p><h5 id="取消开机"><a href="#取消开机" class="headerlink" title="取消开机"></a>取消开机</h5><p>&nbsp;&nbsp;在完全开机前，通过快捷键 <code>Ctrl + Alt + Del</code> 可取消关机。</p><h5 id="Ubuntu-Windows-双系统时间问题"><a href="#Ubuntu-Windows-双系统时间问题" class="headerlink" title="Ubuntu Windows 双系统时间问题"></a>Ubuntu Windows 双系统时间问题</h5><p>&nbsp;&nbsp;Ubuntu 下依次执行下列命令即可：</p><pre><code class="hljs applescript">sudo apt-<span class="hljs-keyword">get</span> install ntpdatesudo ntpdate <span class="hljs-built_in">time</span>.windows.comsudo hwclock <span class="hljs-comment">--localtime --systohc</span></code></pre><p>&nbsp;&nbsp;另外友情提示：时间错误会导致网页加载失败，下次打不开网页记得先检查时间，不要动不动就卸网卡…</p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 18.04 LTS 开发环境配置</title>
    <link href="/2018/09/01/Ubuntu-18-04-LTS-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2018/09/01/Ubuntu-18-04-LTS-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="JDK-配置"><a href="#JDK-配置" class="headerlink" title="JDK 配置"></a>JDK 配置</h1><h2 id="方法一-手动下载安装"><a href="#方法一-手动下载安装" class="headerlink" title="方法一 手动下载安装"></a>方法一 手动下载安装</h2><h3 id="下载并安装"><a href="#下载并安装" class="headerlink" title="下载并安装"></a>下载并安装</h3><p>&nbsp;&nbsp;首先下载 <a href="http://www.oracle.com/technetwork/cn/java/javase/downloads/jdk8-downloads-2133151-zhs.html">JDK8</a> ，解压到  /usr/lib/jvm ，我下载的是 <strong>jdk-8u181-linux-x64.tar.gz</strong>，执行</p><pre><code class="hljs crystal">sudo mkdir /usr/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">jvm</span></span>sudo tar -zxvf jdk-<span class="hljs-number">8</span>u181-linux-x64.tar.gz -C /usr/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">jvm</span></span></code></pre><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>&nbsp;&nbsp;由于我使用 zsh 因此编辑的是 <strong>~/.zshrc</strong> 文件，使用默认终端的则编辑 <strong>~/.bashrc</strong> 文件，或者<strong>配置所有用户的环境变量</strong>编辑 <strong>/etc/profile</strong> 。</p><p>&nbsp;&nbsp;执行：</p><pre><code class="hljs jboss-cli">sudo vi ~<span class="hljs-string">/.zshrc</span></code></pre><p>&nbsp;&nbsp;在文件末尾添加：</p><pre><code class="hljs routeros"><span class="hljs-comment">#set oracle jdk environment</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/usr/lib/jvm/jdk1.8.0_181<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">JRE_HOME</span>=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CLASSPATH</span>=.:$&#123;JAVA_HOME&#125;/lib:<span class="hljs-variable">$&#123;JRE_HOME&#125;</span>/lib<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:$PATH</code></pre><p>&nbsp;&nbsp;然后执行：</p><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc</code></pre><h3 id="系统设置默认-JDK"><a href="#系统设置默认-JDK" class="headerlink" title="系统设置默认 JDK "></a>系统设置默认 JDK </h3><p>&nbsp;&nbsp;执行：</p><pre><code class="hljs crystal">sudo update-alternatives --install /usr/bin/java java /usr/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">jvm</span>/<span class="hljs-title">jdk1</span>.8.0<span class="hljs-title">_181</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">java</span> 300</span>sudo update-alternatives --install /usr/bin/javac javac /usr/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">jvm</span>/<span class="hljs-title">jdk1</span>.8.0<span class="hljs-title">_181</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">javac</span> 300</span>sudo update-alternatives --install /usr/bin/jar jar /usr/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">jvm</span>/<span class="hljs-title">jdk1</span>.8.0<span class="hljs-title">_181</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">jar</span> 300</span>sudo update-alternatives --install /usr/bin/javah javah /usr/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">jvm</span>/<span class="hljs-title">jdk1</span>.8.0<span class="hljs-title">_181</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">javah</span> 300</span>sudo update-alternatives --install /usr/bin/javap javap /usr/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">jvm</span>/<span class="hljs-title">jdk1</span>.8.0<span class="hljs-title">_181</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">javap</span> 300</span></code></pre><p>&nbsp;&nbsp;然后执行:</p><pre><code class="hljs pgsql">sudo <span class="hljs-keyword">update</span>-alternatives <span class="hljs-comment">--config java</span></code></pre><p>&nbsp;&nbsp;若是初次安装 JDK，会有下面的提示:    </p><pre><code class="hljs routeros">There is only one alternative <span class="hljs-keyword">in</span> link<span class="hljs-built_in"> group </span>java (providing /usr/bin/java): /usr/lib/jvm/jdk1.8.0_181/bin/java<span class="hljs-literal">Nothing</span> <span class="hljs-keyword">to</span> configure.</code></pre><p>&nbsp;&nbsp;否则，选择合适的 JDK即可。</p><p>### 查看java版本</p><p>&nbsp;&nbsp;查看版本检验是否安装成功：</p><pre><code class="hljs applescript">java -<span class="hljs-built_in">version</span></code></pre><h2 id="方法二-命令行方式安装-oracle-JDK"><a href="#方法二-命令行方式安装-oracle-JDK" class="headerlink" title="方法二 命令行方式安装 oracle JDK"></a>方法二 命令行方式安装 oracle JDK</h2><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><pre><code class="hljs maxima">sudo apt-<span class="hljs-built_in">get</span> install python-software-<span class="hljs-built_in">properties</span></code></pre><h3 id="添加仓库源"><a href="#添加仓库源" class="headerlink" title="添加仓库源"></a>添加仓库源</h3><pre><code class="hljs smali">sudo<span class="hljs-built_in"> add-apt-repository </span>ppa:webupd8team/java</code></pre><h3 id="更新软件包列表"><a href="#更新软件包列表" class="headerlink" title="更新软件包列表"></a>更新软件包列表</h3><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span></code></pre><h3 id="安装java-JDK"><a href="#安装java-JDK" class="headerlink" title="安装java JDK"></a>安装java JDK</h3><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install oracle-java8-installer</code></pre><p>&nbsp;&nbsp;<strong>注意安装过程中需要接受协议</strong></p><p>###5. 查看java版本</p><pre><code class="hljs applescript">java -<span class="hljs-built_in">version</span></code></pre><h1 id="应用软件安装"><a href="#应用软件安装" class="headerlink" title="应用软件安装"></a>应用软件安装</h1><h2 id="Sublime-Text-3"><a href="#Sublime-Text-3" class="headerlink" title="Sublime Text 3 "></a>Sublime Text 3 </h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>&nbsp;&nbsp;参考 Sublime Text 3 的<a href="https://www.sublimetext.com/docs/3/linux_repositories.html">官方安装文档</a>，按照提示即可正常安装，此处摘录 apt 安装步骤：</p><p>&nbsp;&nbsp;Install the GPG key:</p><pre><code class="hljs vim">wget -qO - http<span class="hljs-variable">s:</span>//download.sublimetext.<span class="hljs-keyword">com</span>/sublimehq-pub.gpg | sudo apt-key <span class="hljs-built_in">add</span> -</code></pre><p>&nbsp;&nbsp;Ensure apt is set up to work with https sources:</p><pre><code class="hljs elm"><span class="hljs-title">sudo</span> apt-get install apt-trans<span class="hljs-keyword">port</span>-https</code></pre><p>&nbsp;&nbsp;以下按需要二选一即可</p><p>&nbsp;&nbsp;Select the channel to use:</p><p><strong>Stable</strong></p><pre><code class="hljs awk">echo <span class="hljs-string">&quot;deb https://download.sublimetext.com/ apt/stable/&quot;</span> | sudo tee <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>sublime-text.list</code></pre><p><strong>Dev</strong></p><pre><code class="hljs awk">echo <span class="hljs-string">&quot;deb https://download.sublimetext.com/ apt/dev/&quot;</span> | sudo tee <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>sublime-text.list</code></pre><p>&nbsp;&nbsp;Update apt sources and install Sublime Text</p><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span>sudo apt-<span class="hljs-keyword">get</span> install sublime-<span class="hljs-type">text</span></code></pre><p>&nbsp;&nbsp;注册码及插件请查看 <a href="https://www.jianshu.com/p/08d07b012d38">Sublime Text 3 插件及注册码</a>。<br>&nbsp;&nbsp;无法输入中文问题请查看 <a href="https://www.jianshu.com/p/592a294962c8">Sublime Text 3 Ubuntu 18.04 无法输入中文解决方案</a>。</p><h2 id="现在可以使用-JetBrain-ToolBox-安装全家桶，安装与更新更为便利"><a href="#现在可以使用-JetBrain-ToolBox-安装全家桶，安装与更新更为便利" class="headerlink" title="现在可以使用 JetBrain ToolBox 安装全家桶，安装与更新更为便利"></a>现在可以使用 JetBrain ToolBox 安装全家桶，安装与更新更为便利</h2><h2 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>&nbsp;&nbsp;首先从 <a href="https://developer.android.com/studio/">https://developer.android.com/studio/</a> 下载软件压缩包。<br>&nbsp;&nbsp;右键解压或者使用以下命令：</p><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> unzip android-studio-ide-<span class="hljs-number">173</span>.<span class="hljs-number">4907809</span>-linux.zip</code></pre><p>&nbsp;&nbsp;解压后文件夹名为 android-studio，将文件夹移动至 /opt/下</p><pre><code class="hljs awk">sudo mv android-studio <span class="hljs-regexp">/opt/</span></code></pre><p>&nbsp;&nbsp;进入文件夹下</p><pre><code class="hljs awk">cd <span class="hljs-regexp">/opt/</span>android-studio<span class="hljs-regexp">/bin/</span></code></pre><p>&nbsp;&nbsp;执行以下命令即可打开 Android Studio，但是不建议这么做，因为这样打开配置文件等均存于root目录下，<strong>建议先创建快捷方式</strong>。</p><pre><code class="hljs jboss-cli">sudo <span class="hljs-string">./studio.sh</span></code></pre><p>&nbsp;&nbsp;初次启动，将设置选择好，会下载所需的文件，需要较长时间。</p><h3 id="创建快捷方式"><a href="#创建快捷方式" class="headerlink" title="创建快捷方式"></a>创建快捷方式</h3><p>&nbsp;&nbsp;Ubuntu 在 /usr/share/applications 目录下存放着系统应用程序的快捷启动图标，我们可以在这里创建 Android Studio 的快捷方式。<br>&nbsp;&nbsp;首先进入文件夹</p><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>share/applications</code></pre><p>&nbsp;&nbsp;创建快捷方式</p><pre><code class="hljs css"><span class="hljs-selector-tag">sudo</span> <span class="hljs-selector-tag">vim</span> <span class="hljs-selector-tag">android-studio</span><span class="hljs-selector-class">.desktop</span></code></pre><p>&nbsp;&nbsp;添加如下内容：</p><pre><code class="hljs routeros">[Desktop Entry]<span class="hljs-attribute">Name</span>=Android StudioName[zh_CN]=Android Studio<span class="hljs-attribute">Comment</span>=Android Studio<span class="hljs-attribute">Exec</span>=/opt/android-studio/bin/studio.sh<span class="hljs-attribute">Icon</span>=/opt/android-studio/bin/studio.png<span class="hljs-attribute">Terminal</span>=<span class="hljs-literal">false</span><span class="hljs-attribute">Type</span>=Application<span class="hljs-attribute">Categories</span>=Application;<span class="hljs-attribute">Encoding</span>=UTF-8<span class="hljs-attribute">StartupNotify</span>=<span class="hljs-literal">true</span></code></pre><p>&nbsp;&nbsp;然后保存退出，执行：</p><pre><code class="hljs css"><span class="hljs-selector-tag">sudo</span> <span class="hljs-selector-tag">chmod</span> +<span class="hljs-selector-tag">x</span> <span class="hljs-selector-tag">android-studio</span><span class="hljs-selector-class">.desktop</span></code></pre><p>&nbsp;&nbsp;即可从菜单栏打开 Android Studio 了。</p><h3 id="配置-adb-环境变量（可选）"><a href="#配置-adb-环境变量（可选）" class="headerlink" title="配置 adb 环境变量（可选）"></a>配置 adb 环境变量（可选）</h3><p>&nbsp;&nbsp;编辑 <strong>~/.zshrc</strong> 文件（系统自带终端编辑 ~/.bashrc ，对所有用户生效编辑 /etc/profile）</p><pre><code class="hljs jboss-cli">sudo vim ~<span class="hljs-string">/.zshrc</span></code></pre><p>&nbsp;&nbsp;在下方加入以下内容（ /home/vanxnf/Android/Sdk 部分写你的 sdk 路径）：</p><pre><code class="hljs elixir"><span class="hljs-comment">#set path for android sdk tools</span>export PATH=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/home/vanxnf/Android/Sdk/tools/</span>export PATH=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/home/vanxnf/Android/Sdk/platform-tools/</span></code></pre><p>&nbsp;&nbsp;然后执行以下命令即可生效。</p><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc</code></pre><h2 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>&nbsp;&nbsp;首先从 <a href="https://www.jetbrains.com/pycharm/download/#section=linux">https://www.jetbrains.com/pycharm/download/#section=linux</a> 下载软件压缩包。也可直接使用以下命令安装：</p><pre><code class="hljs sql">sudo snap <span class="hljs-keyword">install</span> [pycharm-professional|pycharm-community] <span class="hljs-comment">--classic</span></code></pre><p>这里采用下载压缩包的形式，解压并将文件夹移动到 /opt/ 下</p><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -xf pycharm-professional-<span class="hljs-number">2018</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span>.tar.gz<span class="hljs-attribute">sudo</span> mv pycharm-<span class="hljs-number">2018</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span> /opt/</code></pre><p>进入文件夹下</p><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /opt/pycharm-<span class="hljs-number">2018</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span>/bin</code></pre><p>执行以下命令即可打开 PyCharm， 但不建议这么做，建议先创建快捷方式。</p><pre><code class="hljs jboss-cli">sudo <span class="hljs-string">./pycharm.sh</span></code></pre><h3 id="创建快捷方式-1"><a href="#创建快捷方式-1" class="headerlink" title="创建快捷方式"></a>创建快捷方式</h3><p>&nbsp;&nbsp;Ubuntu 在 /usr/share/applications 目录下存放着系统应用程序的快捷启动图标，我们可以在这里创建 PyCharm 的快捷方式。<br>&nbsp;&nbsp;首先进入文件夹</p><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>share/applications</code></pre><p>&nbsp;&nbsp;创建快捷方式</p><pre><code class="hljs reasonml">sudo vim <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PyCharm</span>.</span></span>desktop</code></pre><p>&nbsp;&nbsp;添加如下内容：</p><pre><code class="hljs routeros">[Desktop Entry]<span class="hljs-attribute">Name</span>=PyCharmName[zh_CN]=PyCharm<span class="hljs-attribute">Comment</span>=PyCharm<span class="hljs-attribute">Exec</span>=/opt/pycharm-2018.2.2/bin/pycharm.sh<span class="hljs-attribute">Icon</span>=/opt/pycharm-2018.2.2/bin/pycharm.png<span class="hljs-attribute">Terminal</span>=<span class="hljs-literal">false</span><span class="hljs-attribute">Type</span>=Application<span class="hljs-attribute">Categories</span>=Application;<span class="hljs-attribute">Encoding</span>=UTF-8<span class="hljs-attribute">StartupNotify</span>=<span class="hljs-literal">true</span></code></pre><p>&nbsp;&nbsp;然后保存退出，执行：</p><pre><code class="hljs reasonml">sudo chmod +x <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PyCharm</span>.</span></span>desktop</code></pre><p>&nbsp;&nbsp;即可从菜单栏打开 PyCharm 了。</p><h2 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h2><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><p>&nbsp;&nbsp;首先从 <a href="https://www.jetbrains.com/idea/download/#section=linux">https://www.jetbrains.com/idea/download/#section=linux</a> 下载软件压缩包。</p><p>&nbsp;&nbsp;将压缩包解压并将文件夹移动到 /opt/ 下</p><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -xf ideaIU-<span class="hljs-number">2018</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span>.tar.gz<span class="hljs-attribute">sudo</span> mv idea-IU-<span class="hljs-number">182</span>.<span class="hljs-number">4129</span>.<span class="hljs-number">33</span> /opt</code></pre><p>进入文件夹下</p><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /opt/idea-IU-<span class="hljs-number">182</span>.<span class="hljs-number">4129</span>.<span class="hljs-number">33</span>/bin</code></pre><p>执行以下命令即可打开 IDEA， 但不建议这么做，建议先创建快捷方式。</p><pre><code class="hljs jboss-cli">sudo <span class="hljs-string">./idea.sh</span></code></pre><h3 id="创建快捷方式-2"><a href="#创建快捷方式-2" class="headerlink" title="创建快捷方式"></a>创建快捷方式</h3><p>&nbsp;&nbsp;Ubuntu 在 /usr/share/applications 目录下存放着系统应用程序的快捷启动图标，我们可以在这里创建 IDEA 的快捷方式。<br>&nbsp;&nbsp;首先进入文件夹</p><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>share/applications</code></pre><p>&nbsp;&nbsp;创建快捷方式</p><pre><code class="hljs reasonml">sudo vim <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IDEA</span>.</span></span>desktop</code></pre><p>&nbsp;&nbsp;添加如下内容：</p><pre><code class="hljs routeros">[Desktop Entry]<span class="hljs-attribute">Name</span>=IDEAName[zh_CN]=IDEA<span class="hljs-attribute">Comment</span>=IDEA<span class="hljs-attribute">Exec</span>=/opt/idea-IU-182.4129.33/bin/idea.sh<span class="hljs-attribute">Icon</span>=/opt/idea-IU-182.4129.33/bin/idea.png<span class="hljs-attribute">Terminal</span>=<span class="hljs-literal">false</span><span class="hljs-attribute">Type</span>=Application<span class="hljs-attribute">Categories</span>=Application;<span class="hljs-attribute">Encoding</span>=UTF-8<span class="hljs-attribute">StartupNotify</span>=<span class="hljs-literal">true</span></code></pre><p>&nbsp;&nbsp;然后保存退出，执行：</p><pre><code class="hljs reasonml">sudo chmod +x <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IDEA</span>.</span></span>desktop</code></pre><p>&nbsp;&nbsp;即可从菜单栏打开 IDEA 了。</p><h2 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h2><h3 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h3><p>&nbsp;&nbsp;首先从 <a href="https://www.anaconda.com/download/#linux">https://www.anaconda.com/download/#linux</a> 下载 Anaconda。<br>&nbsp;&nbsp;执行以下命令安装：</p><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> Anaconda<span class="hljs-number">3</span>-<span class="hljs-number">5</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>-Linux-x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.sh</code></pre><p>&nbsp;&nbsp;因为 Anaconda 的脚本只会添加到 ~/.bashrc 下，而使用 zsh 的需要在 ~/.zshrc 下添加</p><pre><code class="hljs routeros"><span class="hljs-comment"># added by Anaconda3 installer</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;/home/vanxnf/anaconda3/bin:<span class="hljs-variable">$PATH</span>&quot;</span></code></pre><p>&nbsp;&nbsp;然后执行：</p><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc</code></pre><p>&nbsp;&nbsp;输入：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">python</span></code></pre><p>&nbsp;&nbsp;显示类似以下内容：</p><pre><code class="hljs routeros">Python 3.6.5 |Anaconda, Inc.| (default, Apr 29 2018, 16:14:56)[GCC 7.2.0] on linuxType <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.&gt;&gt;&gt;</code></pre><p>&nbsp;&nbsp;即安装成功。</p><h2 id="Putty"><a href="#Putty" class="headerlink" title="Putty"></a>Putty</h2><p>&nbsp;&nbsp;使用以下命令安装即可：</p><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install putty</code></pre><p>&nbsp;&nbsp;说一下 Ubuntu GNOME 环境下 putty 的复制粘贴，其实 GNOME 自带这个功能，<strong>只需要鼠标选中高亮要复制的内容，在需要粘贴的地方按鼠标中键即可</strong>。</p><h2 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h2><p>&nbsp;&nbsp;从官网下载 <a href="https://atom.io/">https://atom.io/</a> ，然后使用以下命令安装：</p><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> dpkg -i atom-amd<span class="hljs-number">64</span>.deb</code></pre><h2 id="Clion"><a href="#Clion" class="headerlink" title="Clion"></a>Clion</h2><h3 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h3><p>&nbsp;&nbsp;首先从官网下载 <a href="https://www.jetbrains.com/clion/whatsnew/">https://www.jetbrains.com/clion/whatsnew/</a> 软件压缩包。</p><p>&nbsp;&nbsp;将压缩包解压并移动到 /opt/ 下：</p><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -xf CLion-<span class="hljs-number">2018</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.tar.gz<span class="hljs-attribute">sudo</span> mv clion-<span class="hljs-number">2018</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span> /opt/</code></pre><p>&nbsp;&nbsp;进入文件夹下：</p><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /opt/clion-<span class="hljs-number">2018</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span>/bin</code></pre><p>&nbsp;&nbsp;执行以下命令即可打开 CLion， 但不建议这么做，建议先创建快捷方式。</p><pre><code class="hljs jboss-cli">sudo <span class="hljs-string">./clion.sh</span></code></pre><h3 id="创建快捷方式-3"><a href="#创建快捷方式-3" class="headerlink" title="创建快捷方式"></a>创建快捷方式</h3><p>&nbsp;&nbsp;Ubuntu 在 /usr/share/applications 目录下存放着系统应用程序的快捷启动图标，我们可以在这里创建 CLion 的快捷方式。首先进入文件夹:</p><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>share/applications</code></pre><p>&nbsp;&nbsp;创建快捷方式:</p><pre><code class="hljs reasonml">sudo vim <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Clion</span>.</span></span>desktop</code></pre><p>&nbsp;&nbsp;添加如下内容：</p><pre><code class="hljs routeros">[Desktop Entry]<span class="hljs-attribute">Name</span>=CLionName[zh_CN]=Clion<span class="hljs-attribute">Comment</span>=CLion<span class="hljs-attribute">Exec</span>=/opt/clion-2018.2.3/bin/clion.sh<span class="hljs-attribute">Icon</span>=/opt/clion-2018.2.3/bin/clion.png<span class="hljs-attribute">Terminal</span>=<span class="hljs-literal">false</span><span class="hljs-attribute">Type</span>=Application<span class="hljs-attribute">Categories</span>=Application;<span class="hljs-attribute">Encoding</span>=UTF-8<span class="hljs-attribute">StartupNotify</span>=<span class="hljs-literal">true</span></code></pre><p>&nbsp;&nbsp;然后保存退出，执行：</p><pre><code class="hljs reasonml">sudo chmod +x <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Clion</span>.</span></span>desktop</code></pre><p>&nbsp;&nbsp;即可从菜单栏打开 CLion 了。</p><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu18.04 LTS dash to dock bug解决方案</title>
    <link href="/2018/09/01/Ubuntu18-04-LTS-dash-to-dock-bug%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2018/09/01/Ubuntu18-04-LTS-dash-to-dock-bug%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;截至到目前dash to dock GNOME 3.28<strong>第63版</strong>依旧存在<strong>登陆界面出现dock栏</strong>的问题。</p><p>&nbsp;&nbsp;这其实是<strong>自带的dock栏</strong>导致的，在Extensions中即使关闭它也会有这个问题，输入以下命令将自带dock移动到～下，重启后即可解决此问题(也可移动到其他目录或者直接rm删除)。<strong>Ubuntu 更新后需要再执行一遍</strong>，因为更新会修复自带的 dock。</p><pre><code class="hljs awk">sudo mv <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/gnome-shell/</span>extensions<span class="hljs-regexp">/ubuntu-dock@ubuntu.com ~/</span></code></pre><p>或者</p><pre><code class="hljs awk">sudo rm -rf <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/gnome-shell/</span>extensions/ubuntu-dock@ubuntu.com</code></pre>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
      <tag>dash to dock</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 18.04 LTS 使用 Minecraft 我的世界第三方启动器 HMCL</title>
    <link href="/2018/09/01/Ubuntu-18-04-LTS-%E4%BD%BF%E7%94%A8-Minecraft-%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E7%AC%AC%E4%B8%89%E6%96%B9%E5%90%AF%E5%8A%A8%E5%99%A8-HMCL/"/>
    <url>/2018/09/01/Ubuntu-18-04-LTS-%E4%BD%BF%E7%94%A8-Minecraft-%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E7%AC%AC%E4%B8%89%E6%96%B9%E5%90%AF%E5%8A%A8%E5%99%A8-HMCL/</url>
    
    <content type="html"><![CDATA[<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>&nbsp;&nbsp;首先在下方链接下载第三方启动器：</p><blockquote><p><a href="http://www.mcbbs.net/thread-142335-1-1.html"><strong>http://www.mcbbs.net/thread-142335-1-1.html</strong></a></p></blockquote><p>&nbsp;&nbsp;由于是在 Ubuntu 下运行，下载 jar 版本的即可。</p><p>&nbsp;&nbsp;在将 jar 文件复制到文件夹中，这里我放置在 ~/Documents/MC 下，首先创建这个文件夹：</p><pre><code class="hljs arcade">mkdir ~<span class="hljs-regexp">/Documents/</span>MC</code></pre><p>&nbsp;&nbsp;我下载在 Downloads 文件夹下，因此将它移动到MC文件夹下去：</p><pre><code class="hljs arcade">sudo mv ~<span class="hljs-regexp">/Downloads/</span>HMCL<span class="hljs-number">-3.1</span><span class="hljs-number">.94</span>.jar ~<span class="hljs-regexp">/Documents/</span>MC</code></pre><p>&nbsp;&nbsp;此刻在MC文件夹下执行：</p><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar HMCL-<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">94</span>.jar</code></pre><p><strong>&nbsp;&nbsp;即可运行 HMCL 启动器。</strong></p><h3 id="创建快捷方式"><a href="#创建快捷方式" class="headerlink" title="创建快捷方式"></a>创建快捷方式</h3><p>&nbsp;&nbsp;Ubuntu 在 /usr/share/applications 目录下存放着系统应用程序的快捷启动图标，我们可以在这里创建 Minecraft 的快捷方式。<br>&nbsp;&nbsp;首先<strong>准备一张 minecraft 的图标图片</strong>，作为快捷方式的启动图标，放置在 MC 文件夹下，再在这个文件夹下创建启动脚本：</p><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> minecraft.<span class="hljs-keyword">sh</span></code></pre><p>&nbsp;&nbsp;写入以下内容：</p><pre><code class="hljs d"><span class="hljs-meta">#!bin/sh</span>cd ~/Documents/MC &amp;&amp; java -jar HMCL-<span class="hljs-number">3.1</span><span class="hljs-number">.94</span>.jar</code></pre><p>&nbsp;&nbsp;保存并退出，执行以下命令授予权限：</p><pre><code class="hljs css"><span class="hljs-selector-tag">sudo</span> <span class="hljs-selector-tag">chmod</span> +<span class="hljs-selector-tag">x</span> <span class="hljs-selector-tag">minecraft</span><span class="hljs-selector-class">.sh</span></code></pre><p>&nbsp;&nbsp;前期准备工作到此完成，接下来创建快捷方式：</p><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>share/applicationssudo vim minecraft.desktop</code></pre><p>输入以下内容（<strong>注意：这里的 vanxnf 请替换成你自己的登录名</strong>，存放路径不同的修改成自己的路径）：</p><pre><code class="hljs routeros">[Desktop Entry]<span class="hljs-attribute">Name</span>=MinecraftName[zh_CN]=Minecraft<span class="hljs-attribute">Comment</span>=Minecraft HMCL<span class="hljs-attribute">Exec</span>=sh /home/vanxnf/Documents/MC/minecraft.sh<span class="hljs-attribute">Icon</span>=/home/vanxnf/Documents/MC/minecraft.png<span class="hljs-attribute">Terminal</span>=<span class="hljs-literal">false</span><span class="hljs-attribute">Type</span>=Application<span class="hljs-attribute">Categories</span>=Application;<span class="hljs-attribute">Encoding</span>=UTF-8<span class="hljs-attribute">StartupNotify</span>=<span class="hljs-literal">true</span></code></pre><p>保存退出，执行以下命令授予权限：</p><pre><code class="hljs css"><span class="hljs-selector-tag">sudo</span> <span class="hljs-selector-tag">chmod</span> +<span class="hljs-selector-tag">x</span> <span class="hljs-selector-tag">minecraft</span><span class="hljs-selector-class">.desktop</span></code></pre><p>此时在菜单栏中已经可以找到 Minecraft 的启动图标了，双击即可启动。以这种方式启动，<strong>将不再出现终端窗口</strong>。</p><hr><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>&nbsp;&nbsp;另外，我测试发现，以下两种终端启动方式，读取的<strong>配置文件不共享</strong>：</p><p><strong>第一种：</strong></p><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar ~/Documents/MC/HMCL-<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">94</span>.jar</code></pre><p><strong>第二种：</strong></p><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> ~/Documents/MC &amp;&amp; java -jar HMCL-<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">94</span>.jar</code></pre><p>&nbsp;&nbsp;因此，认准一种启动，设置好后，之后都要使用相同的启动方式才能读取配置。</p><p>&nbsp;&nbsp;我设置时使用的是第二种，方便起见，使用 alias 快捷启动，由于我使用的是<strong>zsh</strong>，执行 (默认终端 应编辑 ~/.bashrc)：</p><pre><code class="hljs jboss-cli">sudo vim ~<span class="hljs-string">/.zshrc</span></code></pre><p>&nbsp;&nbsp;在最下方加上，并保存退出。</p><pre><code class="hljs apache"><span class="hljs-comment">#Minecraft**</span><span class="hljs-attribute">alias</span> MC=&#x27;cd ~/Documents/MC &amp;&amp; java -jar HMCL-<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">94</span>.jar&#x27;</code></pre><p>&nbsp;&nbsp;最后执行即可（编辑 bashrc 的 source ~/.bashrc 即可）</p><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc</code></pre><p>&nbsp;&nbsp;以后启动时，只需要在终端输入 </p><pre><code class="hljs ebnf"><span class="hljs-attribute">MC</span></code></pre><p>&nbsp;&nbsp;即可运行。</p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
      <tag>Minecraft</tag>
      
      <tag>HMCL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 18.04 LTS QQ、微信解决方案</title>
    <link href="/2018/09/01/Ubuntu-18-04-LTS-QQ%E3%80%81%E5%BE%AE%E4%BF%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2018/09/01/Ubuntu-18-04-LTS-QQ%E3%80%81%E5%BE%AE%E4%BF%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>#Deepin-wine 环境安装</p><p>&nbsp;&nbsp;首先安装deepin-wine环境：<a href="https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu">https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu</a> 下载zip包（或用git方式克隆），解压到本地文件夹，在文件夹中打开终端，<strong>切换到 root 账户</strong>，输入：</p><pre><code class="hljs stata"><span class="hljs-keyword">sh</span> ./install.<span class="hljs-keyword">sh</span></code></pre><h2 id="安装应用容器"><a href="#安装应用容器" class="headerlink" title="安装应用容器"></a>安装应用容器</h2><p>&nbsp;&nbsp;然后安装 deepin.com 应用容器，在 <a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/">http://mirrors.aliyun.com/deepin/pool/non-free/d/</a> 中下载想要的容器，<strong>建议在终端下使用dpkg -i安装容器，</strong>双击 deb 安装也可。以下为推荐容器:</p><blockquote><p>QQ：<a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/</a></p></blockquote><blockquote><p>TIM：<a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/</a></p></blockquote><blockquote><p>QQ轻聊版：<a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/</a></p></blockquote><blockquote><p>微信：<a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/</a></p></blockquote><h2 id="托盘图标"><a href="#托盘图标" class="headerlink" title="托盘图标"></a>托盘图标</h2><p>&nbsp;&nbsp;在 Ubuntu 18.04 LTS 中，应用的托盘图标依赖于 GNOME 插件 <strong>TopIconPlus</strong>，可以在 Ubuntu 商店直接安装 TopIconPlus 的 gnome-shell 扩展，也可以使用命令安装：</p><pre><code class="hljs livecodeserver">sudo apt-<span class="hljs-built_in">get</span> install gnome-<span class="hljs-built_in">shell</span>-<span class="hljs-built_in">extension</span>-top-icons-plus gnome-tweaks</code></pre><p>&nbsp;&nbsp;然后用gnome-tweaks开启这个扩展即可。</p>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
      <tag>QQ</tag>
      
      <tag>微信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机械革命 X6Ti-M2 安装 Ubuntu1804 LTS 注意事项</title>
    <link href="/2018/09/01/%E6%9C%BA%E6%A2%B0%E9%9D%A9%E5%91%BDX6Ti-M2-%E5%AE%89%E8%A3%85-Ubuntu1804-LTS-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2018/09/01/%E6%9C%BA%E6%A2%B0%E9%9D%A9%E5%91%BDX6Ti-M2-%E5%AE%89%E8%A3%85-Ubuntu1804-LTS-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;这台机械革命买来有日子了，最初的时候网上教程不全，安装 Ubuntu 总是卡开机画面，现在教程也有一些了，但还是打算稍微记一下关键步骤，方便以后安装。</p><hr><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>&nbsp;&nbsp;此电脑安装 Ubuntu 时，需要禁用 acpi 才能进入。</p><p>&nbsp;&nbsp;Ubuntu 安装界面通过键盘定位到 Install…… 选项，然后按 e 键进入编辑模式。</p><p>&nbsp;&nbsp;找到 — 之后输入一个空格后，再输入 <strong>acpi=off</strong> ，按 F10 键，加载新的启动参数，启动 Ubuntu 的安装界面。</p><p><img src="https://s1.ax1x.com/2018/09/01/PxVU2j.png" alt="acpi=off"></p><p>&nbsp;&nbsp;这时可以正常安装了。</p><p>&nbsp;&nbsp;安装完重启卡开机，可以使用同样的操作。不过我安装完重启的时候没有遇到卡开机的问题。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>&nbsp;&nbsp;安装完成后，安装一下独显的驱动。</p><p><img src="https://s1.ax1x.com/2018/09/01/PxVwMn.png" alt="独显驱动安装"></p><p>&nbsp;&nbsp;安装完成后，修改grub， 输入</p><pre><code class="hljs gradle">sudo vim <span class="hljs-regexp">/etc/</span><span class="hljs-keyword">default</span>/grub</code></pre><p>&nbsp;&nbsp;将 GRUB_CMDLINE_LINUX=”acpi=off” 中的 acpi=off 去掉，保存退出。</p><p><img src="https://s1.ax1x.com/2018/09/01/PxVNGQ.png"></p><p>&nbsp;&nbsp;然后执行：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo update-grub</span></code></pre><p>&nbsp;&nbsp;此时系统的睡眠、开关机都正常了。</p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
      <tag>机械革命</tag>
      
      <tag>X6Ti-M2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ASUS S200E Ubuntu 18.04 开机启动键盘映射</title>
    <link href="/2018/09/01/ASUS-S200E-Ubuntu-18-04-%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E9%94%AE%E7%9B%98%E6%98%A0%E5%B0%84/"/>
    <url>/2018/09/01/ASUS-S200E-Ubuntu-18-04-%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E9%94%AE%E7%9B%98%E6%98%A0%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="设置键盘映射"><a href="#设置键盘映射" class="headerlink" title="设置键盘映射"></a>设置键盘映射</h1><p>&nbsp;&nbsp;老笔电 S200E 跑 Win10 有点吃力了，键盘上 Caps Lock 与左 Shift 键又坏了。趁着假期在家，在X宝上买了配套的键盘换上了（第一次拆超极本，真的费劲），又安装了一下 Ubuntu 18.04 LTS，重获新生啊有没有。</p><hr><p>&nbsp;&nbsp;但是当我安装好Ubuntu，简单美化后，居然发现这款电脑键盘右上角有个专门的功能键？？？功能键就功能键吧，这时才发现X宝上买来换上的键盘右上角这颗功能键键帽印了 “insert” ？？？这怎么能忍，最关键的是这颗键在 Ubuntu 上就是个摆设：</p><p>&nbsp;&nbsp;终端下输入 </p><pre><code class="hljs ebnf"><span class="hljs-attribute">xev</span></code></pre><p>&nbsp;&nbsp;或者</p><pre><code class="hljs 1c">xev <span class="hljs-string">| grep keycode</span></code></pre><p>&nbsp;&nbsp;会弹出图形窗口，此时<strong>按键盘即可查看对应键信息</strong>。一看keycode 248 keysym空 ？？？</p><p>&nbsp;&nbsp;于是 Plan A 走起，然而事情并不简单，扣下旧键帽一看内部搭扣结构，果然和新的不一样，因吹斯听，换键帽路线 OVER；那就只能 Plan B了，本来键帽正确键闲着也就闲着好了，然而它印了 insert 那一切就不一样了，这是要逼死强迫症啊，然而作者算是Linux初级用户，没法自己想出解决方案，于是开始百度谷歌键盘映射，还真给我找到了，这里记录亲身测试过的一种（也是对我这种情况最简单的一种）</p><p>&nbsp;&nbsp;首先用上述指令获取<strong>想修改的键的keycode</strong>，以及<strong>目标键的键值（keysym）</strong></p><p>&nbsp;&nbsp;之后，就在 “~” 目录下创建 <strong>.xmodmaprc</strong>（在别的目录下也行啦）文件</p><pre><code class="hljs jboss-cli">sudo vim ～<span class="hljs-string">/.xmodmaprc</span></code></pre><p>&nbsp;&nbsp;输入内容如下（248是我这颗空闲的功能键的 keycode，而 0xff63 则是键帽上的 insert 对应的 keysym）</p><pre><code class="hljs apache"><span class="hljs-attribute">keycode</span> <span class="hljs-number">248</span> = <span class="hljs-number">0</span>xff<span class="hljs-number">63</span> <span class="hljs-number">0</span>xff<span class="hljs-number">63</span></code></pre><p>&nbsp;&nbsp;保存之后，在终端输入</p><pre><code class="hljs jboss-cli">xmodmap ~<span class="hljs-string">/.xmodmaprc</span></code></pre><p>&nbsp;&nbsp;即可直接生效。</p><h1 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h1><p>&nbsp;&nbsp;但是每次开机后要重新执行一次，很麻烦对不对。于是想到了开机自动执行脚本，然而作者真的菜，搜遍搜索引擎，从 rc.local 到 systemd 全都失败了，看其他大佬的评论大概是xmodmap依赖于x桌面，没加载好前是执行不了的，然而还是没法解决。前前后后试了一天，都要放弃了，终于在个小论坛里看到个方案，尝试了一下真的成功了。</p><p>&nbsp;&nbsp;Ubuntu 自带一个 <strong>Startup Applications Preferences</strong></p><p>&nbsp;&nbsp;点击 add，name可以随便写，command中填</p><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>bash -c <span class="hljs-string">&quot;sleep 30; /usr/bin/xmodmap ~/.xmodmaprc&quot;</span></code></pre><p>&nbsp;&nbsp;Comment也可以随意填写，上面的代码里后面的是文件路径。</p><p><img src="https://s1.ax1x.com/2018/09/01/PxVtPg.png"></p><p>&nbsp;&nbsp;重启后终于成功了。</p><p>&nbsp;&nbsp;完结撒花。</p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ASUS</tag>
      
      <tag>S200E</tag>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
      <tag>开机启动</tag>
      
      <tag>键盘映射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 1804 蓝牙鼠标连接失败问题解决 Bluetooth Mouse Won&#39;t Connect after Reboot</title>
    <link href="/2018/09/01/Ubuntu-1804-%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-Bluetooth-Mouse-Won-t-Connect-after-Reboot/"/>
    <url>/2018/09/01/Ubuntu-1804-%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-Bluetooth-Mouse-Won-t-Connect-after-Reboot/</url>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;方案主要参考自 <a href="https://ubuntuforums.org/showthread.php?t=2390542">Ubuntu Forums</a></p><hr><p>&nbsp;&nbsp;首先 终端下输入</p><pre><code class="hljs ebnf"><span class="hljs-attribute">bluetoothctl</span></code></pre><p>&nbsp;&nbsp;然后输入</p><pre><code class="hljs applescript"><span class="hljs-built_in">list</span></code></pre><p>&nbsp;&nbsp;看清楚 <strong>Controller 的 mac 地址</strong>，我的是 AC:2B:6E:91:65:4E ，在终端输入</p><pre><code class="hljs angelscript">select AC:<span class="hljs-number">2</span>B:<span class="hljs-number">6</span>E:<span class="hljs-number">91</span>:<span class="hljs-number">65</span>:<span class="hljs-number">4</span>E</code></pre><p>&nbsp;&nbsp;然后输入</p><pre><code class="hljs dart"><span class="hljs-keyword">show</span></code></pre><p>&nbsp;&nbsp;<strong>此时确保你的鼠标配对已打开，处于可被发现状态</strong>，输入</p><pre><code class="hljs applescript">scan <span class="hljs-keyword">on</span></code></pre><p>&nbsp;&nbsp;在输出信息中找到你的鼠标后，即可输入</p><pre><code class="hljs nginx"><span class="hljs-attribute">scan</span> <span class="hljs-literal">off</span></code></pre><p>&nbsp;&nbsp;并记下你<strong>鼠标的mac地址</strong>，如果你的鼠标连接时要求 pin code，则输入以下命令，若不用则跳过这一条（当然不确定的话需不需要 pin code 就执行一下，也没什么影响的）。</p><pre><code class="hljs applescript">agent <span class="hljs-keyword">on</span></code></pre><p>&nbsp;&nbsp;接下来使用上一条记下的鼠标mac地址， 输入</p><pre><code class="hljs css"><span class="hljs-selector-tag">pair</span> <span class="hljs-selector-tag">DC</span><span class="hljs-selector-pseudo">:2C</span><span class="hljs-selector-pseudo">:26</span><span class="hljs-selector-pseudo">:AE</span><span class="hljs-selector-pseudo">:35</span><span class="hljs-selector-pseudo">:41</span></code></pre><p>&nbsp;&nbsp;出现 Pairing successful，即配对成功，中间要求 pin code, 就输入对应 pin code即可。这时配对成功，但是鼠标还不能操作，依次输入</p><pre><code class="hljs css"><span class="hljs-selector-tag">connect</span> <span class="hljs-selector-tag">DC</span><span class="hljs-selector-pseudo">:2C</span><span class="hljs-selector-pseudo">:26</span><span class="hljs-selector-pseudo">:AE</span><span class="hljs-selector-pseudo">:35</span><span class="hljs-selector-pseudo">:41</span><span class="hljs-selector-tag">trust</span> <span class="hljs-selector-tag">DC</span><span class="hljs-selector-pseudo">:2C</span><span class="hljs-selector-pseudo">:26</span><span class="hljs-selector-pseudo">:AE</span><span class="hljs-selector-pseudo">:35</span><span class="hljs-selector-pseudo">:41</span></code></pre><p>&nbsp;&nbsp;鼠标即可正常使用了。</p><p>&nbsp;&nbsp;<a href="/2018/09/01/Windows-10-%E5%92%8C-Ubuntu-18-04-LTS-%E5%8F%8C%E7%B3%BB%E7%BB%9F%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/" title="Windows 10 和 Ubuntu 18.04 LTS 双系统蓝牙鼠标连接问题的解决方案">Windows 10 和 Ubuntu 18.04 LTS 双系统蓝牙鼠标连接问题的解决方案</a></p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
      <tag>蓝牙鼠标</tag>
      
      <tag>Bluetooth Mouse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 10 和 Ubuntu 18.04 LTS 双系统蓝牙鼠标连接问题的解决方案</title>
    <link href="/2018/09/01/Windows-10-%E5%92%8C-Ubuntu-18-04-LTS-%E5%8F%8C%E7%B3%BB%E7%BB%9F%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2018/09/01/Windows-10-%E5%92%8C-Ubuntu-18-04-LTS-%E5%8F%8C%E7%B3%BB%E7%BB%9F%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;笔记本安装了双系统，蓝牙鼠标连接一个系统之后重启到另一个系统就需要把鼠标删掉重新连接，十分麻烦。本文旨在为这个问题提供可行的解决方案。主要参考自 <a href="https://blog.csdn.net/10km/article/details/61201268">CSDN</a>。</p><hr><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>&nbsp;&nbsp;首先在 Windows 10 下连上蓝牙鼠标，目的是留下连接记录，方便之后来修改连接值。</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>&nbsp;&nbsp;在Ubuntu 18.04 LTS 中连上蓝牙鼠标，鼠标连不上的看 <a href="https://www.jianshu.com/p/ad06b7e26b45">Ubuntu 1804 蓝牙鼠标连接失败问题解决 Bluetooth Mouse Won’t Connect after Reboot</a></p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>&nbsp;&nbsp;获取 Ubuntu 18.04 LTS下的蓝牙配对 linkkey 值。</p><p>&nbsp;&nbsp;首先切换到 root 账户：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">su</span></code></pre><p>&nbsp;&nbsp;然后执行</p><pre><code class="hljs crystal">cd /var/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">bluetooth</span>/</span></code></pre><p>&nbsp;&nbsp;执行（两个小写的L），获得电脑的蓝牙地址。</p><pre><code class="hljs ebnf"><span class="hljs-attribute">ll</span></code></pre><p>&nbsp;&nbsp;cd 这个地址，再次执行 ll，获得鼠标的蓝牙地址。</p><pre><code class="hljs ebnf"><span class="hljs-attribute">ll</span></code></pre><p>&nbsp;&nbsp;cd 鼠标的蓝牙地址，并执行：</p><pre><code class="hljs nginx"><span class="hljs-attribute">cat</span> <span class="hljs-literal">info</span></code></pre><p>&nbsp;&nbsp;找到 [LinkKey]，记下这个值</p><pre><code class="hljs apache"><span class="hljs-attribute">Key</span>=<span class="hljs-number">966</span>B<span class="hljs-number">5</span>BDD<span class="hljs-number">8</span>EAECD<span class="hljs-number">793</span>FC<span class="hljs-number">26700</span>B<span class="hljs-number">8</span>A<span class="hljs-number">6</span>B<span class="hljs-number">337</span></code></pre><p><img src="https://s1.ax1x.com/2018/09/01/PxVsaT.png"></p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>&nbsp;&nbsp;回到 Windows 10 系统，此时蓝牙鼠标自动连接上了（之前有连接记录），但是不能操控。</p><p>&nbsp;&nbsp;别急，首先到微软官网下载 <a href="https://technet.microsoft.com/en-us/sysinternals/bb897553">PSTools</a> 工具，下载完成后解压到文件夹即可，在文件夹内以管理员身份运行 <strong>cmd</strong>，执行：</p><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PsExec</span>.</span></span>exe -s -i regedit</code></pre><p>&nbsp;&nbsp;找到 <strong>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\BTHPORT\Parameters\Keys\</strong>  下的文件夹，正常情况下是以电脑 mac 地址命名的，找到文件夹内的以蓝牙鼠标 mac 地址命名的文件，修改它的值为之前第三步获取的 <strong>key</strong> 的值即可。</p><h4 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h4><p>&nbsp;&nbsp;重启电脑，这时无论是进 Ubuntu， 还是进 Windows，都能正常使用了。</p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
      <tag>蓝牙鼠标</tag>
      
      <tag>Bluetooth Mouse</tag>
      
      <tag>Windows 10</tag>
      
      <tag>鼠标</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 18.04 LTS 美化记录</title>
    <link href="/2018/09/01/Ubuntu-18-04-LTS-%E7%BE%8E%E5%8C%96%E8%AE%B0%E5%BD%95/"/>
    <url>/2018/09/01/Ubuntu-18-04-LTS-%E7%BE%8E%E5%8C%96%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Grub2-美化"><a href="#Grub2-美化" class="headerlink" title="Grub2 美化"></a>Grub2 美化</h1><p>&nbsp;&nbsp;在 <a href="https://www.gnome-look.org/browse/cat/109/">https://www.gnome-look.org/browse/cat/109/</a> 选择一款合适自己的主题安装，具体操作参照文件介绍即可。<br>&nbsp;&nbsp;我使用的是 <a href="https://www.gnome-look.org/p/1009236/">Grub-theme-vimix</a> 这款，背景图片可以自己替换，修改过之后文件名不同的话记得在 Vimix 文件夹下的 <strong>theme.txt</strong> 中对应修改。</p><p>&nbsp;&nbsp;默认安装的话：</p><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/Downloads/grub-theme-vimix</span>sudo <span class="hljs-string">./Install</span></code></pre><p>&nbsp;&nbsp;注意：安装主题后记得在 <code>/etc/default/grub</code> 中找到 <code>GRUB_GFXMODE</code>这一行，然后删去最前面的 <code>#</code> 将后面的分辨率改成自己的就可以了。结果如下：</p><pre><code class="hljs apache"><span class="hljs-attribute">GRUB_GFXMODE</span>=<span class="hljs-number">1920</span>x<span class="hljs-number">1080</span></code></pre><h1 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h1><p>&nbsp;&nbsp;Ubuntu采用了GNOME，因此要美化主题，首先需要安装 gnome-tweak-tool 。</p><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> updatesudo apt-<span class="hljs-builtin-name">get</span> install gnome-tweak-tool</code></pre><p>&nbsp;&nbsp;接下来，需要安装 User themes 才能启用第三方主题，直接从 Ubuntu 自带商店中搜索安装即可。</p><p><img src="https://s1.ax1x.com/2018/09/01/PxVyIU.png"></p><p>&nbsp;&nbsp;安装完成后，就可以设置主题了。推荐两款主题</p><p>&nbsp;&nbsp;对于想仿 mac 美化的，推荐 <a href="https://www.opendesktop.org/s/Gnome/p/1013714/">macOS High Sierra</a> 这款主题，点击即可访问，选择 File 下载到本地，解压一下丢到 <strong>~/.themes</strong> 下重新打开 Tweak Tool 即可看到， 它有配套的 cursor 和 icon ，解压后丢到 <strong>~/.icons</strong> 下即可，字体解压后直接安装或者丢到 <strong>~/.fonts</strong> 下。</p><p>&nbsp;&nbsp;对于扁平化主题，推荐 <a href="https://www.gnome-look.org/p/1013698/">Vimix-Gtk-Theme</a> 这款主题，点击即可访问下载，详细安装方法参见主题的介绍页，或者到该主题的 github 主页，有中文安装说明。如果都不喜欢，那就到 <a href="https://www.opendesktop.org/s/Gnome">https://www.opendesktop.org/s/Gnome</a> 去自己探索一下。</p><p>&nbsp;&nbsp;个人比较喜欢 Vimix-Dark-Laptop-Doder ，整体效果如下</p><p><img src="https://s1.ax1x.com/2018/09/01/PxZoXn.png"></p><h1 id="登录界面美化"><a href="#登录界面美化" class="headerlink" title="登录界面美化"></a>登录界面美化</h1><p>&nbsp;&nbsp;Ubuntu 自带的登录界面万年纯色背景不是很喜欢，也有直接替换背景图片的办法，这里我就偷个懒，用别人写好的代码，访问 <a href="https://www.opendesktop.org/s/Gnome/p/1207015/">High Ubunterra</a> 下载它准备好的文件，解压后有如下几个文件：</p><p><img src="https://s1.ax1x.com/2018/09/01/PxVrZV.png"></p><p>&nbsp;&nbsp;在文件夹中打开终端，或者 cd 到此文件夹下都行，执行：</p><pre><code class="hljs cmake">sudo chmod +x <span class="hljs-keyword">install</span>.shsudo ./<span class="hljs-keyword">install</span>.sh</code></pre><p>&nbsp;&nbsp;然后换上你想放到登录页的壁纸，对图片右键，选 Set As Wallpaper 就行，然后执行：</p><pre><code class="hljs jboss-cli">sudo <span class="hljs-string">./SetAsWallpaper</span></code></pre><p>&nbsp;&nbsp;Picture文件夹下会出现一张名为 **gdmlock.jpg **的图片，Tweak Tool 中 Appearance 下 Lock Screen 设为这张图就行了。</p><h1 id="终端美化"><a href="#终端美化" class="headerlink" title="终端美化"></a>终端美化</h1><h2 id="安装-zsh-和-oh-my-zsh"><a href="#安装-zsh-和-oh-my-zsh" class="headerlink" title="安装 zsh 和 oh-my-zsh"></a>安装 zsh 和 oh-my-zsh</h2><p>&nbsp;&nbsp;终端选用 zsh ，首先执行：</p><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install zsh</code></pre><p>&nbsp;&nbsp;接下来我们需要下载 oh-my-zsh 项目来帮我们配置 zsh，采用wget安装</p><pre><code class="hljs markdown">sh -c &quot;$(wget[<span class="hljs-string">https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh</span>](<span class="hljs-link">https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh</span>)-O -)&quot;</code></pre><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><h3 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h3><p>&nbsp;&nbsp;安装语法高亮插件 highlight：</p><pre><code class="hljs awk">cd ~<span class="hljs-regexp">/.oh-my-zsh/</span>custom/plugins &amp;&amp;\git clone git:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/zsh-users/</span>zsh-syntax-highlighting.git</code></pre><p>&nbsp;&nbsp;在Oh-my-zsh的配置文件中 <strong>~/.zshrc</strong> 中添加插件：</p><pre><code class="hljs ini"><span class="hljs-attr">plugins</span>=( [plugins...], zsh-syntax-highlighting)</code></pre><p>&nbsp;&nbsp;重新打开终端即可生效。</p><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><pre><code class="hljs awk">git clone git:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/zsh-users/</span>zsh-autosuggestions<span class="hljs-variable">$ZSH_CUSTOM</span><span class="hljs-regexp">/plugins/</span>zsh-autosuggestions</code></pre><p>&nbsp;&nbsp;在 ~/.zshrc 中添加：</p><pre><code class="hljs ini"><span class="hljs-attr">plugins</span>=( [plugins...],  zsh-autosuggestions)</code></pre><p>&nbsp;&nbsp;重新打开终端即可生效。</p><h2 id="设置-zsh-主题"><a href="#设置-zsh-主题" class="headerlink" title="设置 zsh 主题"></a>设置 zsh 主题</h2><p>&nbsp;&nbsp;编辑 ~/.zshrc ，找到ZSH_THEME修改为你想要的主题即可。</p><p>&nbsp;&nbsp;agnoster这款主题不错，但配套使用需要先安装一下配套字体 Powerline：</p><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:powerline/fonts.gitcd fontssudo ./install.sh</code></pre><p>&nbsp;&nbsp;在设置中启用第三方字体即可：</p><p><img src="https://s1.ax1x.com/2018/09/01/PxVJIS.png"></p><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><p>&nbsp;&nbsp;编辑 ~/.zshrc，在最下方添加，:</p><pre><code class="hljs ini"><span class="hljs-attr">DEFAULT_USER</span>=<span class="hljs-variable">$USER</span></code></pre><p>&nbsp;&nbsp;保存退出即可。</p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
      <tag>美化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sublime Text 3 配置 python3 编译环境（Ubuntu 18.04 LTS）</title>
    <link href="/2018/09/01/Sublime-Text-3-%E9%85%8D%E7%BD%AE-python3-%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%EF%BC%88Ubuntu-18-04-LTS%EF%BC%89/"/>
    <url>/2018/09/01/Sublime-Text-3-%E9%85%8D%E7%BD%AE-python3-%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%EF%BC%88Ubuntu-18-04-LTS%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="获取-python3-路径"><a href="#获取-python3-路径" class="headerlink" title="获取 python3 路径"></a>获取 python3 路径</h3><p>&nbsp;&nbsp;在终端下输入</p><pre><code class="hljs apache"><span class="hljs-attribute">which</span> python<span class="hljs-number">3</span></code></pre><p>&nbsp;&nbsp;即可显示 python3 所在路径，记下这个路径。</p><h3 id="新建编译配置文件"><a href="#新建编译配置文件" class="headerlink" title="新建编译配置文件"></a>新建编译配置文件</h3><p>&nbsp;&nbsp;打开 sublime text 3，点击上部菜单栏 <code>Tools</code>-&gt;<code>Build System</code>-&gt;<code>new Build System</code><br>清空新打开的模板，输入以下代码（ /usr/bin/python3 为第一步得到的路径）：</p><pre><code class="hljs json">&#123; <span class="hljs-attr">&quot;cmd&quot;</span>: [<span class="hljs-string">&quot;/usr/bin/python3&quot;</span>, <span class="hljs-string">&quot;-u&quot;</span>, <span class="hljs-string">&quot;$file&quot;</span>], <span class="hljs-attr">&quot;file_regex&quot;</span>: <span class="hljs-string">&quot;^[ ]*File \&quot;(...*?)\&quot;, line ([0-9]*)&quot;</span>, <span class="hljs-attr">&quot;selector&quot;</span>: <span class="hljs-string">&quot;source.python&quot;</span> &#125;</code></pre><p>&nbsp;&nbsp;保存即可。</p><h3 id="选择编译配置文件"><a href="#选择编译配置文件" class="headerlink" title="选择编译配置文件"></a>选择编译配置文件</h3><p>&nbsp;&nbsp;点击上部菜单栏 <code>Tools</code>-&gt;<code>Build System</code> ，选择刚才保存的文件即可。</p>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
      <tag>Sublime Text 3</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sublime Text 3 插件及注册码</title>
    <link href="/2018/09/01/Sublime-Text-3-%E6%8F%92%E4%BB%B6%E5%8F%8A%E6%B3%A8%E5%86%8C%E7%A0%81/"/>
    <url>/2018/09/01/Sublime-Text-3-%E6%8F%92%E4%BB%B6%E5%8F%8A%E6%B3%A8%E5%86%8C%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h3 id="Sublime-Text-3-注册码及破解"><a href="#Sublime-Text-3-注册码及破解" class="headerlink" title="Sublime Text 3 注册码及破解"></a>Sublime Text 3 注册码及破解</h3><h4 id="破解方案一"><a href="#破解方案一" class="headerlink" title="破解方案一"></a><a href="https://gist.github.com/laptrinhcomvn/ae127424a9026f507a3c"><strong>破解方案一</strong></a></h4><p>&nbsp;&nbsp;退出 sublime， 在终端输入以下代码:</p><pre><code class="hljs routeros">printf<span class="hljs-string">&#x27;\x00\01&#x27;</span>| sudo dd <span class="hljs-attribute">seek</span>=$((0xD538)) <span class="hljs-attribute">conv</span>=notrunc <span class="hljs-attribute">bs</span>=1of=/opt/sublime_text/sublime_text</code></pre><p>&nbsp;&nbsp;然后编辑 hosts 文件：</p><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>hosts</code></pre><p>&nbsp;&nbsp;在最下方加入:</p><pre><code class="hljs accesslog"><span class="hljs-number">0.0.0.0</span> license.sublimehq.com</code></pre><p>&nbsp;&nbsp;重新打开 sublime 即可。</p><h4 id="破解方案二"><a href="#破解方案二" class="headerlink" title="破解方案二"></a><strong>破解方案二</strong></h4><p>输入以下注册码：</p><pre><code class="hljs angelscript">----- BEGIN LICENSE -----sgbteamSingle User LicenseEA7E<span class="hljs-number">-1153259</span><span class="hljs-number">8891</span>CBB9 F1513E4F <span class="hljs-number">1</span>A3405C1 A865D53F<span class="hljs-number">115</span>F202E <span class="hljs-number">7</span>B91AB2D <span class="hljs-number">0</span>D2A40ED <span class="hljs-number">352</span>B269B<span class="hljs-number">76E84</span>F0B CD69BFC7 <span class="hljs-number">59</span>F2DFEF E267328F<span class="hljs-number">215652</span>A3 E88F9D8F <span class="hljs-number">4</span>C38E3BA <span class="hljs-number">5</span>B2DAAE4<span class="hljs-number">969624E7</span> DC9CD4D5 <span class="hljs-number">717</span>FB40C <span class="hljs-number">1</span>B9738CF<span class="hljs-number">20</span>B3C4F1 E917B5B3 <span class="hljs-number">87</span>C38D9C ACCE7DD8<span class="hljs-number">5</span>F7EF854 <span class="hljs-number">86</span>B9743C FADC04AA FB0DA5C0F913BE58 <span class="hljs-number">42</span>FEA319 F954EFDD AE881E0B------ END LICENSE ------</code></pre><h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><p>&nbsp;&nbsp;首先安装 Package Control 组件：按 Ctrl+ ` (此符号为 tab 按键上面的按键) 调出 console（注：避免热键冲突）到命令行执行以下代码：</p><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> urllib.request,os; pf = <span class="hljs-string">&#x27;Package Control.sublime-package&#x27;</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="hljs-keyword">open</span>(os.path.<span class="hljs-keyword">join</span>(ipp, pf), <span class="hljs-string">&#x27;wb&#x27;</span>).<span class="hljs-keyword">write</span>(urllib.request.urlopen( <span class="hljs-string">&#x27;http://sublime.wbond.net/&#x27;</span> + pf.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;%20&#x27;</span>)).<span class="hljs-keyword">read</span>())</code></pre><h4 id="Emmet（原名-Zen-Coding）"><a href="#Emmet（原名-Zen-Coding）" class="headerlink" title="Emmet（原名 Zen Coding）"></a>Emmet（原名 Zen Coding）</h4><p>&nbsp;&nbsp;一种快速编写 html/css 的方法</p><h4 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h4><p>&nbsp;&nbsp;支持 hmtl5 规范的插件包<br>&nbsp;&nbsp;注意：与 Emmet 插件配合使用，效果更好<br>&nbsp;&nbsp;使用方法：新建 html 文档&gt;输入 html5 &gt;敲击 Tab 键&gt;自动补全 html5 规范文档</p><h4 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h4><p>&nbsp;&nbsp;支持 JQuery 规范的插件包</p><h4 id="javascript-API-Completions"><a href="#javascript-API-Completions" class="headerlink" title="javascript-API-Completions"></a>javascript-API-Completions</h4><p>&nbsp;&nbsp;支持 Javascript、JQuery、Twitter Bootstrap 框架、HTML5 标签属性提示的插件，是少数支持sublime text 3 的后缀提示的插件，HTML5 标签提示 sublime text 3 自带，不过 JQuery 提示还是很有用处的，也可设置要提示的语言。<br>&nbsp;&nbsp;安装方法（请阅读链接详情）：<a href="http://www.ithao123.cn/content-10545789.html">http://www.ithao123.cn/content-10545789.html</a></p><h4 id="JSFormat"><a href="#JSFormat" class="headerlink" title="JSFormat"></a>JSFormat</h4><p>&nbsp;&nbsp;JS 代码格式化插件。<br>&nbsp;&nbsp;使用方法：使用快捷键 ctrl+alt+f</p><h4 id="SublimeLinter"><a href="#SublimeLinter" class="headerlink" title="SublimeLinter"></a>SublimeLinter</h4><p>&nbsp;&nbsp;一个支持 lint 语法的插件，可以高亮 linter 认为有错误的代码行，也支持高亮一些特别的注释，比如 “TODO”，这样就可以被快速定位。（IntelliJ IDEA 的 TODO 功能很赞，这个插件虽然比不上，但是也够用了吧）</p><h4 id="BracketHighlighter"><a href="#BracketHighlighter" class="headerlink" title="BracketHighlighter"></a>BracketHighlighter</h4><p>&nbsp;&nbsp;类似于代码匹配，可以匹配括号，引号等符号内的范围。<br>&nbsp;&nbsp;使用方法：系统默认为白色高亮，可以使用链接所述方法进行自定义配置<br><a href="http://www.360doc.com/content/14/1111/15/15077656_424301780.shtml">http://www.360doc.com/content/14/1111/15/15077656_424301780.shtml</a></p><h4 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h4><p>&nbsp;&nbsp;代码对齐，如写几个变量，选中这几行，Ctrl+Alt+A，哇，齐了。</p><h4 id="Ctags"><a href="#Ctags" class="headerlink" title="Ctags"></a>Ctags</h4><p>&nbsp;&nbsp;函数跳转，我的电脑上是 Alt+点击 函数名称，会跳转到相应的函数</p><h4 id="Doc​Blockr"><a href="#Doc​Blockr" class="headerlink" title="Doc​Blockr"></a>Doc​Blockr</h4><p>&nbsp;&nbsp;注释插件，生成优美的注释。标准的注释，包括函数名、参数、返回值等，并以多行显示，省去手动编写。<br>&nbsp;&nbsp;使用方法见：<a href="http://www.cnblogs.com/huangtailang/p/4499988.html">http://www.cnblogs.com/huangtailang/p/4499988.html</a></p><h4 id="SideBarEnhancements"><a href="#SideBarEnhancements" class="headerlink" title="SideBarEnhancements"></a>SideBarEnhancements</h4><p>&nbsp;&nbsp;侧栏右键功能增强，非常实用</p><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>&nbsp;&nbsp;Boxy （<a href="https://link.zhihu.com/?target=https://github.com/ihodev/sublime-boxy">ihodev/sublime-boxy</a>）<br>&nbsp;&nbsp;Boxy（The most hackable theme for Sublime Text 3）自带多种主题风格，可以融合 <a href="https://link.zhihu.com/?target=https://github.com/ihodev/sublime-file-icons">ihodev/sublime-file-icons</a>，切换主题风格不必改配置。安装方法：<br>1. <code>install package</code> -&gt; Boxy Theme<br>2. <code>install package</code> -&gt; A File Icon</p>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sublime Text 3</tag>
      
      <tag>注册码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 18.04 LTS 常用软件</title>
    <link href="/2018/09/01/Ubuntu-18-04-LTS-%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    <url>/2018/09/01/Ubuntu-18-04-LTS-%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h3><p>&nbsp;&nbsp;首先从 <a href="https://music.163.com/#/download">https://music.163.com/#/download</a> 下载最新版本。然后使用以下命令安装：</p><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> dpkg -i netease-cloud-music_<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>_amd<span class="hljs-number">64</span>_ubuntu<span class="hljs-number">16</span>.<span class="hljs-number">04</span>.deb</code></pre><p>&nbsp;&nbsp;安装完成后发现桌面图标打不开面板，搜索发现两个有效的解决方案，第二种方案揭示了问题的本质，<del>但目前对于 gnome-shell，第二种方案需要另写一个脚本来运行，并且存在每次启动都是全新启动，无法读取之前设置的问题。</del>推荐使用第二种方案。</p><p>&nbsp;&nbsp;<a href="https://notes.ijustplay.cn/software/ubuntu-netease-cloud-music.html">Ubuntu 18.04 网易云音乐无法打开最简单解决办法</a></p><p>&nbsp;&nbsp;<a href="https://www.zhihu.com/question/277330447/answer/478510195">Ubuntu 18.04 装了网易云音乐，难道只能用 sudo 启动吗？ - Fancy的回答 - 知乎</a></p><p>&nbsp;&nbsp;如果遇到无法保存配置的问题，以下是解决方案：</p><p>&nbsp;&nbsp;在 Home 目录下搜索 netease-cloud-music 可以发现在 home 下的 <code>.cache</code> 和 <code>.config</code> 下都存在这个文件夹，对于 <code>.cache</code> 下的文件夹直接删除，对于 <code>.config</code> 下的文件夹，需要改变所有者，执行以下命令：</p><pre><code class="hljs properties"><span class="hljs-attr">cd</span> <span class="hljs-string">~/.config</span><span class="hljs-attr">sudo</span> <span class="hljs-string">chown -R vanxnf netease-cloud-music</span><span class="hljs-attr">sudo</span> <span class="hljs-string">chown -R vanxnf:vanxnf netease-cloud-music</span></code></pre><p>&nbsp;&nbsp;修改文件夹权限如下：</p><p><img src="https://s1.ax1x.com/2018/09/26/iMcEx1.png" alt="文件夹权限"></p><p>&nbsp;&nbsp;文件夹内三个文件的权限均设置成如下图所示：</p><p><img src="https://s1.ax1x.com/2018/09/26/iMcZKx.png" alt="文件权限"></p><h3 id="画图-draw-io"><a href="#画图-draw-io" class="headerlink" title="画图 draw.io"></a>画图 <a href="https://www.draw.io/">draw.io</a></h3><p>&nbsp;&nbsp;这严格来说并不是一款软件，而是一款Chrome的插件,能够添加到桌面。非常好用、易用，可以满足大部分画图功能。进网页后选择<code>帮助</code>-&gt;<code>Download draw.io Desktop...</code>下载后使用以下命令安装即可：</p><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> dpkg -i draw.io-amd<span class="hljs-number">64</span>-<span class="hljs-number">8</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.deb</code></pre><h3 id="图片处理-GIMP"><a href="#图片处理-GIMP" class="headerlink" title="图片处理 GIMP"></a>图片处理 GIMP</h3><p>&nbsp;&nbsp;在 Ubuntu Software 中搜索即可安装。</p><h3 id="视频播放器-SMPlayer"><a href="#视频播放器-SMPlayer" class="headerlink" title="视频播放器 SMPlayer"></a>视频播放器 SMPlayer</h3><p>&nbsp;&nbsp;执行以下命令安装：</p><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install smplayer</code></pre><h3 id="拼音-谷歌拼音"><a href="#拼音-谷歌拼音" class="headerlink" title="拼音 谷歌拼音"></a>拼音 谷歌拼音</h3><p>&nbsp;&nbsp;打字确实是搜狗拼音舒服一点，但是搜狗拼音时不时的会出现候选词乱码问题。网络上的解决方案都治标不治本，因此还是主要用谷歌拼音了。<br>&nbsp;&nbsp;执行以下命令安装谷歌拼音：</p><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install fcitx-googlepinyin</code></pre><p>&nbsp;&nbsp;<code>system setting</code>-&gt; <code>Language Support</code> 中 <code>Keyboard input method system</code> 选择 <strong>fcitx</strong>。<strong>重启</strong>后在 Fcitx Config Tool 中启动谷歌拼音即可。</p><h3 id="截图工具-Shutter"><a href="#截图工具-Shutter" class="headerlink" title="截图工具 Shutter"></a>截图工具 Shutter</h3><p>&nbsp;&nbsp;执行以下命令安装：</p><pre><code class="hljs smali">sudo<span class="hljs-built_in"> add-apt-repository </span>ppa:shutter/ppasudo apt-get updatesudo apt-get install shutter</code></pre><p>&nbsp;&nbsp;在 <code>Settings</code> -&gt; <code>Devices</code> -&gt; <code>Keyboard</code> 中的 Custom Shortcuts 中添加：<br><img src="https://s1.ax1x.com/2018/09/01/PxVBq0.png"><br>&nbsp;&nbsp;选中后按 <strong>Enter</strong> 确认即可。</p><h3 id="办公套件-WPS"><a href="#办公套件-WPS" class="headerlink" title="办公套件 WPS"></a>办公套件 WPS</h3><p>&nbsp;&nbsp;首先从 <a href="http://community.wps.cn/download/">http://community.wps.cn/download/</a> 官网下载最新版文件。执行命令安装：</p><pre><code class="hljs css"><span class="hljs-selector-tag">sudo</span> <span class="hljs-selector-tag">dpkg</span> <span class="hljs-selector-tag">-i</span> <span class="hljs-selector-tag">wps-office_10</span><span class="hljs-selector-class">.1</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.6634_amd64</span><span class="hljs-selector-class">.deb</span></code></pre><p>&nbsp;&nbsp;修复缺失字体问题</p><ol><li>下载文件并解压<br><a href="https://pan.baidu.com/s/1mh0lcbY">百度云</a></li><li>继续执行命令<br>&nbsp;&nbsp;将得到文件解压进一个文件夹内，进入这个文件夹，将里面的字体文件都复制到 /usr/share/fonts 下：<pre><code class="hljs arcade">sudo cp * <span class="hljs-regexp">/usr/</span>share/fonts</code></pre>&nbsp;&nbsp;生成字体的索引信息<pre><code class="hljs properties"><span class="hljs-attr">sudo</span> <span class="hljs-string">mkfontscale</span><span class="hljs-attr">sudo</span> <span class="hljs-string">mkfontdir</span></code></pre>&nbsp;&nbsp;更新字体缓存<pre><code class="hljs ebnf"><span class="hljs-attribute">sudo fc-cache</span></code></pre></li></ol><h3 id="解压-unrar"><a href="#解压-unrar" class="headerlink" title="解压 unrar"></a>解压 unrar</h3><p>&nbsp;&nbsp;首先执行以下命令安装：</p><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install unrar</code></pre><p>&nbsp;&nbsp;这个网上教程很多，但很遗憾，一开始那位写错了，后面的都抄错了。最常用命令是：</p><pre><code class="hljs css"><span class="hljs-selector-tag">unrar</span> <span class="hljs-selector-tag">x</span> <span class="hljs-selector-tag">xxx</span><span class="hljs-selector-class">.rar</span></code></pre><p>&nbsp;&nbsp;这样可以保持压缩包文件目录结构解压出来。</p><h3 id="PDF-阅读器-okular"><a href="#PDF-阅读器-okular" class="headerlink" title="PDF 阅读器 okular"></a>PDF 阅读器 okular</h3><p>&nbsp;&nbsp;执行以下命令安装：</p><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install okular</code></pre>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 18.04 LTS GitHub Pages + Hexo 搭建博客</title>
    <link href="/2018/09/01/Ubuntu-18.04-LTS-GitHub-Pages-Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2018/09/01/Ubuntu-18.04-LTS-GitHub-Pages-Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;这是一篇在 Ubuntu 18.04 LTS 中使用 GitHub Pages 和 Hexo 搭建免费独立博客的总结。我有自己的服务器，出于某种需要，我用我的服务器反代了 GitHub Pages, 将会使用自己的域名访问 GitHub Pages 上的博客。同时，为了在多台电脑上都可以更新博客，采用两个分支的方式来存放文件，master 分支存放 Hexo 渲染出来的文件， 新建的分支存放源文件。</p><h1 id="必要配置"><a href="#必要配置" class="headerlink" title="必要配置"></a>必要配置</h1><h2 id="GitHub-Pages-仓库"><a href="#GitHub-Pages-仓库" class="headerlink" title="GitHub Pages 仓库"></a>GitHub Pages 仓库</h2><h3 id="创建对应仓库"><a href="#创建对应仓库" class="headerlink" title="创建对应仓库"></a>创建对应仓库</h3><p>&nbsp;&nbsp;在自己的 GitHub 账号下创建一个新的仓库，命名为 username.github.io（username是你的账号名)。</p><p>&nbsp;&nbsp;在这里，要知道，GitHub Pages 有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是 User Pages。</p><p>&nbsp;&nbsp;简单来说，User Pages 与 Project Pages 的区别是：</p><ol><li>User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。</li><li>用于存放 User Pages 的仓库必须使用 username.github.io 的命名规则，而 Project Pages 则没有特殊的要求。</li><li>User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。</li><li>User Pages 通过 <code>http(s)://username.github.io</code> 进行访问，而 Projects Pages 通过 <code>http(s)://username.github.io/projectname</code> 进行访问。</li></ol><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><ul><li><a href="https://help.github.com/articles/user-organization-and-project-pages/">GitHub Pages Basics / User, Organization, and Project Pages</a></li></ul><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><pre><code class="hljs bash">sudo apt-get install git</code></pre><h3 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h3><p>&nbsp;&nbsp;当安装完 Git 应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：</p><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;username&quot;</span>git config --global user.email <span class="hljs-string">&quot;username@example.com&quot;</span></code></pre><p>&nbsp;&nbsp;对于 user.email，因为在 GitHub 的 commits 信息上是可见的，所以如果你不想让人知道你的 email，可以 Keeping your email address private:</p><ol><li>在GitHub右上方点击你的头像，选择<code>Settings</code>；</li><li>在右边的<code>Personal settings</code>侧边栏选择<code>Emails</code>；</li><li>选择<code>Keep my email address private</code>。</li></ol><p>&nbsp;&nbsp;这样，你就可以使用如下格式的 email 进行配置：</p><pre><code class="hljs bash">$ git config --global user.email <span class="hljs-string">&quot;username@users.noreply.github.com&quot;</span></code></pre><h3 id="相关资料-1"><a href="#相关资料-1" class="headerlink" title="相关资料"></a>相关资料</h3><ul><li><a href="http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">安装 Git</a></li><li><a href="http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE">配置 Git</a></li><li><a href="https://help.github.com/articles/setting-your-email-in-git/">Setting your email in Git</a></li><li><a href="https://help.github.com/articles/keeping-your-email-address-private/">Keeping your email address private</a></li></ul><h2 id="Git-与-GitHub"><a href="#Git-与-GitHub" class="headerlink" title="Git 与 GitHub"></a>Git 与 GitHub</h2><h3 id="与github建立联系"><a href="#与github建立联系" class="headerlink" title="与github建立联系"></a>与github建立联系</h3><p>&nbsp;&nbsp;为了能够在本地使用 git 管理 github 上的项目，需要进行一些配置，这里介绍 SSH 的方法。</p><h4 id="检查电脑是否已经有-SSH-keys。"><a href="#检查电脑是否已经有-SSH-keys。" class="headerlink" title="检查电脑是否已经有 SSH keys。"></a>检查电脑是否已经有 SSH keys。</h4><pre><code class="hljs bash">ls ~/.ssh<span class="hljs-comment"># Lists the files in your .ssh directory, if they exist</span></code></pre><p>&nbsp;&nbsp;默认情况下，public keys 的文件名是以下的格式之一：id_dsa.pub、id_ecdsa.pub、id_ed25519.pub、id_rsa.pub。因此，如果列出的文件有 public 和 private 钥匙对（例如id_ras.pub和id_rsa），证明已存在 SSH keys。</p><h4 id="如果没有-SSH-key，则生成新的-SSH-key。"><a href="#如果没有-SSH-key，则生成新的-SSH-key。" class="headerlink" title="如果没有 SSH key，则生成新的 SSH key。"></a>如果没有 SSH key，则生成新的 SSH key。</h4><pre><code class="hljs bash">ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><span class="hljs-comment"># Creates a new ssh key, using the provided email as a label</span></code></pre><p>&nbsp;&nbsp;之后一路回车即可。</p><h4 id="向-ssh-agent-添加-key。"><a href="#向-ssh-agent-添加-key。" class="headerlink" title="向 ssh-agent 添加 key。"></a>向 ssh-agent 添加 key。</h4><p>&nbsp;&nbsp;首先确保 ssh-agent 可运行：</p><pre><code class="hljs bash"><span class="hljs-comment"># start the ssh-agent in the background</span>ssh-agent -s</code></pre><p>&nbsp;&nbsp;然后添加 SSH key：</p><pre><code class="hljs bash">ssh-add ~/.ssh/id_rsa</code></pre><h4 id="在-GitHub-添加-SSH-key。"><a href="#在-GitHub-添加-SSH-key。" class="headerlink" title="在 GitHub 添加 SSH key。"></a>在 GitHub 添加 SSH key。</h4><p>&nbsp;&nbsp;首先，拷贝 key：</p><pre><code class="hljs bash">sudo cat ~/.ssh/id_rsa.pub<span class="hljs-comment"># Copies the contents of the id_rsa.pub file to your cllipboard</span></code></pre><p>&nbsp;&nbsp;然后，在 GitHub 右上方点击头像，选择<code>Settings</code>，在右边的<code>Personal settings</code>侧边栏选择<code>SSH Keys</code>。接着粘贴 key，点击<code>Add key</code>按钮。最后，测试链接：</p><pre><code class="hljs bash">ssh -T git@github.com<span class="hljs-comment"># Attempts to ssh to GitHub</span></code></pre><p>&nbsp;&nbsp;如果你看到：</p><pre><code class="hljs bash">The authenticity of host <span class="hljs-string">&#x27;github.com (207.97.227.239)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no)?</span></code></pre><p>&nbsp;&nbsp;就键入：yes。之后将会看到如下信息：</p><pre><code class="hljs bash">Hi username! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not</span><span class="hljs-string">provide shell access.</span></code></pre><h3 id="相关资料-2"><a href="#相关资料-2" class="headerlink" title="相关资料"></a>相关资料</h3><ul><li><a href="https://help.github.com/articles/generating-ssh-keys/">Generating SSH keys</a></li></ul><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>&nbsp;&nbsp;具体安装方法及主题配置请查看：<a href="/2018/09/01/Ubuntu-18-04-LTS-%E9%85%8D%E7%BD%AE-Hexo/" title="Ubuntu 18.04 LTS 配置 Hexo">Ubuntu 18.04 LTS 配置 Hexo</a></p><h2 id="搭建方法"><a href="#搭建方法" class="headerlink" title="搭建方法"></a>搭建方法</h2><p>&nbsp;&nbsp;在上面，我们已经配置好了所需的前置条件，也了解了 Hexo 博客搭建方法。现在，需要使用 GitHub Pages 搭建一个别人能够访问的 Hexo 博客了。</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>&nbsp;&nbsp;创建一个名为<code>username.github.io</code>的仓库。</p><h3 id="搭建-hexo-博客-并创建两个分支：master-与-source"><a href="#搭建-hexo-博客-并创建两个分支：master-与-source" class="headerlink" title="搭建 hexo 博客 并创建两个分支：master 与 source"></a>搭建 hexo 博客 并创建两个分支：master 与 source</h3><h4 id="首先建立-hexo-博客"><a href="#首先建立-hexo-博客" class="headerlink" title="首先建立 hexo 博客"></a>首先建立 hexo 博客</h4><pre><code class="hljs bash">mkdir ~/Documents/Hexo<span class="hljs-built_in">cd</span> ~/Documents/Hexosudo npm install -g hexo-clihexo initsudo npm installsudo npm install hexo-deployer-git</code></pre><h4 id="创建-source-分支，并使其为默认分支："><a href="#创建-source-分支，并使其为默认分支：" class="headerlink" title="创建 source 分支，并使其为默认分支："></a>创建 source 分支，并使其为默认分支：</h4><pre><code class="hljs bash">git initgit remote add origin git@github.com:username/username.github.io.gitgit add .<span class="hljs-comment">#添加修改</span>git commit -m <span class="hljs-string">&quot;init hexo&quot;</span><span class="hljs-comment">#初次提交</span>git checkout -b <span class="hljs-built_in">source</span><span class="hljs-comment">#建立分支 hexo 并切换到分支 hexo</span>git push -u origin <span class="hljs-built_in">source</span><span class="hljs-comment">#将分支 hexo 提交到 github</span></code></pre><h4 id="创建-空白分支-master"><a href="#创建-空白分支-master" class="headerlink" title="创建 空白分支 master"></a>创建 空白分支 master</h4><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ..<span class="hljs-comment">#退回上一级目录</span>mkdir new<span class="hljs-comment">#创建一个新的文件夹用以创建空白分支</span><span class="hljs-built_in">cd</span> ~/Documents/newgit inittouch README.md<span class="hljs-comment">#随意创建一个文件，用于提交分支</span>git add .git commit -m <span class="hljs-string">&quot;new branch&quot;</span>git remote add origin git@github.com:username/username.github.io.gitgit push origin master<span class="hljs-comment">#将分支 master 提交到 github</span>rm README.mdgit add .git commit -m <span class="hljs-string">&quot;clear new branch&quot;</span>git push origin master<span class="hljs-built_in">cd</span> ~/Documents/rm -rf new<span class="hljs-built_in">cd</span> Hexogit pull</code></pre><p>&nbsp;&nbsp;执行完成之后，该仓库的默认分支被设为 source，同时还有空白的 master 分支用于存放网页。</p><h4 id="设置域名"><a href="#设置域名" class="headerlink" title="设置域名"></a>设置域名</h4><p>&nbsp;&nbsp;在 username.github.io 仓库首页选择<code>Settings</code>，向下拉，在<code>GitHub Pages</code>部分的<code>Custom domain</code>中填上自己的域名，点击<code>save</code>保存。此操作会在 master 分支下生成一个 CNAME 文件，里面就是刚填写的域名。</p><h4 id="配置-hexo-提交方式"><a href="#配置-hexo-提交方式" class="headerlink" title="配置 hexo 提交方式"></a>配置 hexo 提交方式</h4><p>&nbsp;&nbsp;编辑该文件夹下的<code>_config.yml</code>的<code>deploy</code>参数，分支应为 master。</p><p>默认生成的_config.yml：</p><pre><code class="hljs bash"><span class="hljs-comment"># Deployment</span><span class="hljs-comment">## Docs: http://hexo.io/docs/deployment.html</span>deploy:  <span class="hljs-built_in">type</span>:</code></pre><p>修改后的_config.yml：</p><pre><code class="hljs bash">deploy:  <span class="hljs-built_in">type</span>: git  repo: 对应仓库的SSH地址（可以在 GitHub 对应的仓库中复制）  branch: 分支（User Pages 为 master，Project Pages 为 gh-pages）</code></pre><h4 id="修改博客及部署操作"><a href="#修改博客及部署操作" class="headerlink" title="修改博客及部署操作"></a>修改博客及部署操作</h4><p>&nbsp;&nbsp;修改博客内容后依次执行以下命令来提交网站相关的文件：</p><pre><code class="hljs bash">git add .git commit -m <span class="hljs-string">&quot;自定义内容即可&quot;</span>git push origin <span class="hljs-built_in">source</span></code></pre><p>&nbsp;&nbsp;然后执行以下任意一条生成网站并部署到 GitHub 上。</p><pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span> -d</code></pre><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g -d</span></code></pre><p>&nbsp;&nbsp;这样一来，在 GitHub 上的 username.github.io 仓库就有两个分支，一个 source 分支用来存放网站的原始文件，一个 master 分支用来存放生成的静态网页。</p><h4 id="域名重置问题及解决方案"><a href="#域名重置问题及解决方案" class="headerlink" title="域名重置问题及解决方案"></a>域名重置问题及解决方案</h4><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>&nbsp;&nbsp;每次执行完<code>hexo g -d</code>之后，github 仓库设置中的 <code>Custom domain</code>总是被重置，导致域名访问出现 404 错误。</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>&nbsp;&nbsp;在 Hexo 生成的博客的 source 目录下新建一个 CNAME 文件，里面填上自己的域名即可。</p><h2 id="博客管理"><a href="#博客管理" class="headerlink" title="博客管理"></a>博客管理</h2><h3 id="博客管理流程"><a href="#博客管理流程" class="headerlink" title="博客管理流程"></a>博客管理流程</h3><h4 id="日常修改"><a href="#日常修改" class="headerlink" title="日常修改"></a>日常修改</h4><p>&nbsp;&nbsp;在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：</p><ol><li>依次执行<code>git add .</code>、<code>git commit -m &quot;...&quot;</code>、<code>git push origin source</code>指令将改动推送到 GitHub（此时当前分支应为 source）；</li><li>然后才执行 <code>hexo g -d</code> 或 <code>hexo generate -d</code> 发布网站到 master 分支上。</li></ol><h4 id="本地资料丢失"><a href="#本地资料丢失" class="headerlink" title="本地资料丢失"></a>本地资料丢失</h4><p>&nbsp;&nbsp;当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p><ol><li>使用 <code>git clone git@github.com:username/username.github.io.git</code> 拷贝仓库（默认分支为 source）；</li><li>在本地新拷贝的<code>username.github.io</code>文件夹下通过终端依次执行下列指令：<code>sudo npm install -g hexo-cli</code>、<code>sudo npm install</code>、<code>sudo npm install hexo-deployer-git</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
      <tag>Hexo</tag>
      
      <tag>静态独立博客</tag>
      
      <tag>GitHub Page</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在添加仓库 add-apt-repository 或者更新 apt update命令显示错误</title>
    <link href="/2018/09/01/%E5%9C%A8%E6%B7%BB%E5%8A%A0%E4%BB%93%E5%BA%93-add-apt-repository-%E6%88%96%E8%80%85%E6%9B%B4%E6%96%B0-apt-update%E5%91%BD%E4%BB%A4%E6%98%BE%E7%A4%BA%E9%94%99%E8%AF%AF/"/>
    <url>/2018/09/01/%E5%9C%A8%E6%B7%BB%E5%8A%A0%E4%BB%93%E5%BA%93-add-apt-repository-%E6%88%96%E8%80%85%E6%9B%B4%E6%96%B0-apt-update%E5%91%BD%E4%BB%A4%E6%98%BE%E7%A4%BA%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;类似以下错误：<br><img src="https://s1.ax1x.com/2018/09/01/PxV0rq.png"></p><p>&nbsp;&nbsp;添加的仓库保存在 /etc/apt/sources.list.d目录下。删除对应的错误仓库文件即可。</p><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> /etc/apt/sources.<span class="hljs-keyword">list</span>.<span class="hljs-keyword">d</span>sudo <span class="hljs-keyword">rm</span> 对应仓库</code></pre><p>&nbsp;&nbsp;重新执行原操作即可。</p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>apt update</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sublime Text 3 Ubuntu 18.04 无法输入中文解决方案</title>
    <link href="/2018/09/01/Sublime-Text-3-Ubuntu-18-04-%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2018/09/01/Sublime-Text-3-Ubuntu-18-04-%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p><strong>&nbsp;&nbsp;本方案来自 GitHub 项目 <a href="https://github.com/lyfeyaj/sublime-text-imfix">sublime-text-imfix</a> ， 感谢 <a href="https://github.com/lyfeyaj">lyfeyaj</a> 的付出。</strong></p><hr><h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ul><li>已安装 Sublime Text 3</li><li>已安装 Fcitx 输入框架<h1 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h1></li></ul><ol><li>更新系统到最新<pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> update &amp;&amp; sudo apt-<span class="hljs-builtin-name">get</span> upgrade</code></pre></li><li>克隆项目到本地<pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/lyfeyaj/</span>sublime-text-imfix.git</code></pre></li><li>进入项目文件夹<pre><code class="hljs applescript">cd sublime-<span class="hljs-built_in">text</span>-imfix</code></pre></li><li>执行修复脚本<pre><code class="hljs jboss-cli">sudo <span class="hljs-string">./sublime-imfix</span></code></pre></li></ol><ul><li>显示以下内容即修复成功：<pre><code class="hljs oxygene">Done!Thanks <span class="hljs-keyword">for</span> <span class="hljs-keyword">using</span> this script <span class="hljs-keyword">to</span> fix CJK Input <span class="hljs-function"><span class="hljs-keyword">Method</span> <span class="hljs-title">problem</span> <span class="hljs-title">of</span> <span class="hljs-title">SublimeText</span> 2/3.</span><span class="hljs-function"></span><span class="hljs-function"><span class="hljs-title">Re</span>-<span class="hljs-title">login</span> <span class="hljs-title">your</span> <span class="hljs-title">X</span> <span class="hljs-title">windows</span> <span class="hljs-title">and</span> <span class="hljs-title">start</span> <span class="hljs-title">to</span> <span class="hljs-title">use</span> <span class="hljs-title">SublimeText</span> 2/3 <span class="hljs-title">with</span> <span class="hljs-title">Fcitx</span>!</span></code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
      <tag>Sublime Text 3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 18.04 LTS 配置 Hexo</title>
    <link href="/2018/09/01/Ubuntu-18-04-LTS-%E9%85%8D%E7%BD%AE-Hexo/"/>
    <url>/2018/09/01/Ubuntu-18-04-LTS-%E9%85%8D%E7%BD%AE-Hexo/</url>
    
    <content type="html"><![CDATA[<p>GitHub Pages + Hexo 搭建博客可查看 <a href="/2018/09/01/Ubuntu-18.04-LTS-GitHub-Pages-Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/" title="Ubuntu 18.04 LTS GitHub Pages + Hexo 搭建博客">Ubuntu 18.04 LTS GitHub Pages + Hexo 搭建博客</a></p><hr><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul><li><p><strong>git</strong><br>首先需要在系统中安装git：<code>sudo apt install git</code><br>可以先检查是否安装git：<code>git --version</code><br>然后是对git的一些基本配置：</p>  <pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">&quot;username&quot;</span>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">&quot;youremail&quot;</span></code></pre></li><li><p><strong>node.js</strong><br>安装：<code>sudo apt install nodejs</code></p></li><li><p><strong>npm</strong><br>npm ( nodejs的包管理工具)：<code>sudo apt insatll npm</code><br>管理工具的使用：<br>升级新版npm：<code>sudo npm install npm -g</code><br>使用npm安装模块：<code>npm install module_name</code><br>查看所有全局安装的npm模块：<code>npm ls -g</code><br>模块的卸载：<code>npm uninstall module_name</code><br>更新模块：<code>npm update module_name</code></p></li></ul><h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><ol><li>创建目录 <pre><code class="hljs arduino"><span class="hljs-built_in">mkdir</span> hexo</code></pre></li><li>切换目录 <pre><code class="hljs bash"><span class="hljs-built_in">cd</span> hexo</code></pre></li><li>全局安装 Hexo <pre><code class="hljs avrasm">sudo npm install -g hexo-<span class="hljs-keyword">cli</span></code></pre></li><li>初始化 Hexo <pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span></code></pre></li><li>运行 Hexo <pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span></code></pre> 成功运行的话会提示： <pre><code class="hljs pgsql"><span class="hljs-keyword">INFO</span>  <span class="hljs-keyword">Start</span> processing<span class="hljs-keyword">INFO</span>  Hexo <span class="hljs-keyword">is</span> running at http://localhost:<span class="hljs-number">4000</span> . Press Ctrl+C <span class="hljs-keyword">to</span> stop.</code></pre><h1 id="Hexo-主题"><a href="#Hexo-主题" class="headerlink" title="Hexo 主题"></a>Hexo 主题</h1>&nbsp;&nbsp;Hexo 主题可以从这里找：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>&nbsp;&nbsp;推荐安装主题 NexT<br>&nbsp;&nbsp;到目录 hexo 下：<pre><code class="hljs awk">cd ~<span class="hljs-regexp">/Documents/</span>hexo/git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/iissnan/</span>hexo-theme-<span class="hljs-keyword">next</span> themes/<span class="hljs-keyword">next</span></code></pre>&nbsp;&nbsp;并在目录 hexo 下的 _config.yml 中找到 theme: 修改后面的参数，默认是 landscape，改为<pre><code class="hljs autoit">theme: <span class="hljs-keyword">next</span></code></pre><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1></li></ol><ul><li>新建博客项目，默认为指定的 folder 文件夹;  <pre><code class="hljs apache"><span class="hljs-attribute">hexo</span> init<span class="hljs-meta"> [folder]</span></code></pre></li><li>新建文章，总共有<code>post</code>、<code>draft</code>、<code>page</code>三种 layout，文章以你指定的 title 名创建，title 中如果有空格请使用“”括起来;  <pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;</code></pre></li><li>生成静态文件，下面的代码为简写，可以添加 <code>-w</code> 参数监视文件的变动;  <pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span>hexo g</code></pre></li><li>启动本地服务器，可以添加参数 <code>-p</code> 指定服务器的端口，默认在端口4000  <pre><code class="hljs routeros">hexo serverhexo s</code></pre></li><li>博客项目部署  <pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">deploy</span><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span></code></pre></li><li>一键静态文件生成与部署  <pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">g -d</span><span class="hljs-attr">hexo</span> <span class="hljs-string">d -g</span></code></pre></li><li>清楚缓存和生成的静态文件，对应于 db.json 和 public 目录下的文件  <pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">clean</span><span class="hljs-attr">hexo</span> <span class="hljs-string">cl</span></code></pre></li><li>列出博客文件树  <pre><code class="hljs applescript">hexo <span class="hljs-built_in">list</span> route</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu 18.04 LTS</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
